#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "common_util.h"

#include "Predictors/GbdtPredictor.h"

namespace bp = boost::python;

struct GbdtPredictor_wrapper : gezi::GbdtPredictor, bp::wrapper< gezi::GbdtPredictor > {

GbdtPredictor_wrapper(gezi::GbdtPredictor const & arg )
: gezi::GbdtPredictor( arg )
, bp::wrapper< gezi::GbdtPredictor >(){
// copy constructor

}

GbdtPredictor_wrapper( )
: gezi::GbdtPredictor( )
, bp::wrapper< gezi::GbdtPredictor >(){
// null constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees, ::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
: gezi::GbdtPredictor( boost::ref(trees), calibrator, boost::ref(featureNames) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees, ::gezi::FeatureNamesVector const & featureNames )
: gezi::GbdtPredictor( boost::ref(trees), boost::ref(featureNames) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees )
: gezi::GbdtPredictor( boost::ref(trees) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::string modelPath )
: gezi::GbdtPredictor( modelPath )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

virtual bool CustomLoad_( ::std::string path ) {
if( bp::override func_CustomLoad_ = this->get_override( "CustomLoad_" ) )
return func_CustomLoad_( path );
else
return this->gezi::GbdtPredictor::CustomLoad_( path );
}


bool default_CustomLoad_( ::std::string path ) {
return gezi::GbdtPredictor::CustomLoad_( path );
}

virtual void CustomSave_( ::std::string path ) {
if( bp::override func_CustomSave_ = this->get_override( "CustomSave_" ) )
func_CustomSave_( path );
else
this->gezi::GbdtPredictor::CustomSave_( path );
}


void default_CustomSave_( ::std::string path ) {
gezi::GbdtPredictor::CustomSave_( path );
}

virtual bool LoadText( ::std::string file ) {
if( bp::override func_LoadText = this->get_override( "LoadText" ) )
return func_LoadText( file );
else
return this->gezi::GbdtPredictor::LoadText( file );
}


bool default_LoadText( ::std::string file ) {
return gezi::GbdtPredictor::LoadText( file );
}

virtual bool Load_( ::std::string file ) {
if( bp::override func_Load_ = this->get_override( "Load_" ) )
return func_Load_( file );
else
return this->gezi::GbdtPredictor::Load_( file );
}


bool default_Load_( ::std::string file ) {
return gezi::GbdtPredictor::Load_( file );
}

virtual ::Float Margin( ::gezi::Vector & features ){
if( bp::override func_Margin = this->get_override( "Margin" ) )
return func_Margin( boost::ref(features) );
else
return this->gezi::GbdtPredictor::Margin( boost::ref(features) );
}

virtual ::std::string Name(  ) {
if( bp::override func_Name = this->get_override( "Name" ) )
return func_Name(  );
else
return this->gezi::GbdtPredictor::Name(  );
}


::std::string default_Name(  ) {
return gezi::GbdtPredictor::Name( );
}

virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
func_SaveCode_( file, codeType );
else
this->gezi::GbdtPredictor::SaveCode_( file, codeType );
}


void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
gezi::GbdtPredictor::SaveCode_( file, codeType );
}

virtual void SaveJson_( ::std::string file ) {
if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
func_SaveJson_( file );
else
this->gezi::GbdtPredictor::SaveJson_( file );
}


void default_SaveJson_( ::std::string file ) {
gezi::GbdtPredictor::SaveJson_( file );
}

virtual void SaveXml_( ::std::string file ) {
if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
func_SaveXml_( file );
else
this->gezi::GbdtPredictor::SaveXml_( file );
}


void default_SaveXml_( ::std::string file ) {
gezi::GbdtPredictor::SaveXml_( file );
}

virtual void Save_( ::std::string file ) {
if( bp::override func_Save_ = this->get_override( "Save_" ) )
func_Save_( file );
else
this->gezi::GbdtPredictor::Save_( file );
}


void default_Save_( ::std::string file ) {
gezi::GbdtPredictor::Save_( file );
}

virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
return func_ToGainSummary( boost::ref(features) );
else
return this->gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}


::std::string default_ToGainSummary( ::gezi::Vector & features ) {
return gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}

::std::vector< gezi::OnlineRegressionTree > & Trees(  ){
return gezi::GbdtPredictor::Trees(  );
}

};

struct GbdtRegressionPredictor_wrapper : gezi::GbdtRegressionPredictor, bp::wrapper< gezi::GbdtRegressionPredictor > {

GbdtRegressionPredictor_wrapper(gezi::GbdtRegressionPredictor const & arg )
: gezi::GbdtRegressionPredictor( arg )
, bp::wrapper< gezi::GbdtRegressionPredictor >(){
// copy constructor

}

GbdtRegressionPredictor_wrapper()
: gezi::GbdtRegressionPredictor()
, bp::wrapper< gezi::GbdtRegressionPredictor >(){
// null constructor

}

virtual ::gezi::PredictionKind GetPredictionKind(  ) {
if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
return func_GetPredictionKind(  );
else
return this->gezi::GbdtRegressionPredictor::GetPredictionKind(  );
}


::gezi::PredictionKind default_GetPredictionKind(  ) {
return gezi::GbdtRegressionPredictor::GetPredictionKind( );
}

virtual ::std::string Name(  ) {
if( bp::override func_Name = this->get_override( "Name" ) )
return func_Name(  );
else
return this->gezi::GbdtRegressionPredictor::Name(  );
}


::std::string default_Name(  ) {
return gezi::GbdtRegressionPredictor::Name( );
}

virtual bool CustomLoad_( ::std::string path ) {
if( bp::override func_CustomLoad_ = this->get_override( "CustomLoad_" ) )
return func_CustomLoad_( path );
else
return this->gezi::GbdtPredictor::CustomLoad_( path );
}


bool default_CustomLoad_( ::std::string path ) {
return gezi::GbdtPredictor::CustomLoad_( path );
}

virtual void CustomSave_( ::std::string path ) {
if( bp::override func_CustomSave_ = this->get_override( "CustomSave_" ) )
func_CustomSave_( path );
else
this->gezi::GbdtPredictor::CustomSave_( path );
}


void default_CustomSave_( ::std::string path ) {
gezi::GbdtPredictor::CustomSave_( path );
}

virtual bool LoadText( ::std::string file ) {
if( bp::override func_LoadText = this->get_override( "LoadText" ) )
return func_LoadText( file );
else
return this->gezi::GbdtPredictor::LoadText( file );
}


bool default_LoadText( ::std::string file ) {
return gezi::GbdtPredictor::LoadText( file );
}

virtual bool Load_( ::std::string file ) {
if( bp::override func_Load_ = this->get_override( "Load_" ) )
return func_Load_( file );
else
return this->gezi::GbdtPredictor::Load_( file );
}


bool default_Load_( ::std::string file ) {
return gezi::GbdtPredictor::Load_( file );
}

virtual ::Float Margin( ::gezi::Vector & features ){
if( bp::override func_Margin = this->get_override( "Margin" ) )
return func_Margin( boost::ref(features) );
else
return this->gezi::GbdtPredictor::Margin( boost::ref(features) );
}

virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
func_SaveCode_( file, codeType );
else
this->gezi::GbdtPredictor::SaveCode_( file, codeType );
}


void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
gezi::GbdtPredictor::SaveCode_( file, codeType );
}

virtual void SaveJson_( ::std::string file ) {
if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
func_SaveJson_( file );
else
this->gezi::GbdtPredictor::SaveJson_( file );
}


void default_SaveJson_( ::std::string file ) {
gezi::GbdtPredictor::SaveJson_( file );
}

virtual void SaveXml_( ::std::string file ) {
if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
func_SaveXml_( file );
else
this->gezi::GbdtPredictor::SaveXml_( file );
}


void default_SaveXml_( ::std::string file ) {
gezi::GbdtPredictor::SaveXml_( file );
}

virtual void Save_( ::std::string file ) {
if( bp::override func_Save_ = this->get_override( "Save_" ) )
func_Save_( file );
else
this->gezi::GbdtPredictor::Save_( file );
}


void default_Save_( ::std::string file ) {
gezi::GbdtPredictor::Save_( file );
}

virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
return func_ToGainSummary( boost::ref(features) );
else
return this->gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}


::std::string default_ToGainSummary( ::gezi::Vector & features ) {
return gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}

::std::vector< gezi::OnlineRegressionTree > & Trees(  ){
return gezi::GbdtPredictor::Trees(  );
}

};

BOOST_PYTHON_MODULE(libtest){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);
DEF_MAP(ss_map);
DEF_PAIR(ii_pair);
DEF_PAIR(si_pair);
DEF_PAIR(wsi_pair);
DEF_VEC(si_pair_vec);
DEF_VEC(wsi_pair_vec);
DEF_SET(iset);
DEF_SET(lset);
DEF_SET(ulset);

{ //::std::vector< gezi::OnlineRegressionTree >
typedef bp::class_< std::vector< gezi::OnlineRegressionTree > > vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t;
vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t vector_less__gezi_scope_OnlineRegressionTree__greater__exposer = vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t( "vector_less__gezi_scope_OnlineRegressionTree__greater_" );
bp::scope vector_less__gezi_scope_OnlineRegressionTree__greater__scope( vector_less__gezi_scope_OnlineRegressionTree__greater__exposer );
//WARNING: the next line of code will not compile, because "::gezi::OnlineRegressionTree" does not have operator== !
//         vector_less__gezi_scope_OnlineRegressionTree__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::OnlineRegressionTree > >() );
}

bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")
.def( bp::map_indexing_suite< ::std::map< int, double >, true >() )
MAP_METHOD(::std::map< int COMMA  double >);

{ //::gezi::GbdtPredictor
typedef bp::class_< GbdtPredictor_wrapper > GbdtPredictor_exposer_t;
GbdtPredictor_exposer_t GbdtPredictor_exposer = GbdtPredictor_exposer_t( "GbdtPredictor", bp::init< >() );
bp::scope GbdtPredictor_scope( GbdtPredictor_exposer );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > &, gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("trees"), bp::arg("calibrator"), bp::arg("featureNames") )) );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > &, gezi::FeatureNamesVector const & >(( bp::arg("trees"), bp::arg("featureNames") )) );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > & >(( bp::arg("trees") )) );
bp::implicitly_convertible< std::vector< gezi::OnlineRegressionTree > &, gezi::GbdtPredictor >();
GbdtPredictor_exposer.def( bp::init< std::string >(( bp::arg("modelPath") )) );
bp::implicitly_convertible< std::string, gezi::GbdtPredictor >();
{ //::gezi::GbdtPredictor::CustomLoad_

typedef bool ( ::gezi::GbdtPredictor::*CustomLoad__function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_CustomLoad__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomLoad_"
, CustomLoad__function_type(&::gezi::GbdtPredictor::CustomLoad_)
, default_CustomLoad__function_type(&GbdtPredictor_wrapper::default_CustomLoad_)
, ( bp::arg("path") ) );

}
{ //::gezi::GbdtPredictor::CustomSave_

typedef void ( ::gezi::GbdtPredictor::*CustomSave__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_CustomSave__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomSave_"
, CustomSave__function_type(&::gezi::GbdtPredictor::CustomSave_)
, default_CustomSave__function_type(&GbdtPredictor_wrapper::default_CustomSave_)
, ( bp::arg("path") ) );

}
{ //::gezi::GbdtPredictor::FeatureGainPrint

typedef void ( ::gezi::GbdtPredictor::*FeatureGainPrint_function_type )( ::gezi::Vector &,int ) ;

GbdtPredictor_exposer.def(
"FeatureGainPrint"
, FeatureGainPrint_function_type( &::gezi::GbdtPredictor::FeatureGainPrint )
, ( bp::arg("features"), bp::arg("level")=(int)(0) ) );

}
{ //::gezi::GbdtPredictor::GainMap

typedef ::std::map< int, double > ( ::gezi::GbdtPredictor::*GainMap_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"GainMap"
, GainMap_function_type( &::gezi::GbdtPredictor::GainMap )
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::LoadText

typedef bool ( ::gezi::GbdtPredictor::*LoadText_function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_LoadText_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"LoadText"
, LoadText_function_type(&::gezi::GbdtPredictor::LoadText)
, default_LoadText_function_type(&GbdtPredictor_wrapper::default_LoadText)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Load_

typedef bool ( ::gezi::GbdtPredictor::*Load__function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_Load__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Load_"
, Load__function_type(&::gezi::GbdtPredictor::Load_)
, default_Load__function_type(&GbdtPredictor_wrapper::default_Load_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Margin

typedef ::Float ( GbdtPredictor_wrapper::*Margin_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"Margin"
, Margin_function_type( &GbdtPredictor_wrapper::Margin )
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::Name

typedef ::std::string ( ::gezi::GbdtPredictor::*Name_function_type )(  ) ;
typedef ::std::string ( GbdtPredictor_wrapper::*default_Name_function_type )(  ) ;

GbdtPredictor_exposer.def(
"Name"
, Name_function_type(&::gezi::GbdtPredictor::Name)
, default_Name_function_type(&GbdtPredictor_wrapper::default_Name) );

}
{ //::gezi::GbdtPredictor::SaveCode_

typedef void ( ::gezi::GbdtPredictor::*SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;

GbdtPredictor_exposer.def(
"SaveCode_"
, SaveCode__function_type(&::gezi::GbdtPredictor::SaveCode_)
, default_SaveCode__function_type(&GbdtPredictor_wrapper::default_SaveCode_)
, ( bp::arg("file"), bp::arg("codeType") ) );

}
{ //::gezi::GbdtPredictor::SaveJson_

typedef void ( ::gezi::GbdtPredictor::*SaveJson__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveJson__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveJson_"
, SaveJson__function_type(&::gezi::GbdtPredictor::SaveJson_)
, default_SaveJson__function_type(&GbdtPredictor_wrapper::default_SaveJson_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::SaveXml_

typedef void ( ::gezi::GbdtPredictor::*SaveXml__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveXml__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveXml_"
, SaveXml__function_type(&::gezi::GbdtPredictor::SaveXml_)
, default_SaveXml__function_type(&GbdtPredictor_wrapper::default_SaveXml_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Save_

typedef void ( ::gezi::GbdtPredictor::*Save__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_Save__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Save_"
, Save__function_type(&::gezi::GbdtPredictor::Save_)
, default_Save__function_type(&GbdtPredictor_wrapper::default_Save_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::ToGainSummary

typedef ::std::string ( ::gezi::GbdtPredictor::*ToGainSummary_function_type )( ::gezi::Vector & ) ;
typedef ::std::string ( GbdtPredictor_wrapper::*default_ToGainSummary_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"ToGainSummary"
, ToGainSummary_function_type(&::gezi::GbdtPredictor::ToGainSummary)
, default_ToGainSummary_function_type(&GbdtPredictor_wrapper::default_ToGainSummary)
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::Trees

typedef ::std::vector< gezi::OnlineRegressionTree > & ( GbdtPredictor_wrapper::*Trees_function_type )(  ) ;

GbdtPredictor_exposer.def(
"Trees"
, Trees_function_type( &GbdtPredictor_wrapper::Trees )
, bp::return_internal_reference<>());

}
GbdtPredictor_exposer.def_readwrite( "_textModelPath", &gezi::GbdtPredictor::_textModelPath );
GbdtPredictor_exposer.def_readwrite( "_trees", &gezi::GbdtPredictor::_trees );
GbdtPredictor_exposer.def_readwrite( "xtrees", &gezi::GbdtPredictor::xtrees );
}

bp::class_< GbdtRegressionPredictor_wrapper, bp::bases< gezi::GbdtPredictor > >( "GbdtRegressionPredictor" )
.def(
"GetPredictionKind"
, (::gezi::PredictionKind ( ::gezi::GbdtRegressionPredictor::* )(  ) )(&::gezi::GbdtRegressionPredictor::GetPredictionKind)
, (::gezi::PredictionKind ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_GetPredictionKind) )
.def(
"Name"
, (::std::string ( ::gezi::GbdtRegressionPredictor::* )(  ) )(&::gezi::GbdtRegressionPredictor::Name)
, (::std::string ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_Name) )
.def(
"CustomLoad_"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::CustomLoad_)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomLoad_)
, ( bp::arg("path") ) )
.def(
"CustomSave_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::CustomSave_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomSave_)
, ( bp::arg("path") ) )
.def(
"LoadText"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::LoadText)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_LoadText)
, ( bp::arg("file") ) )
.def(
"Load_"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::Load_)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Load_)
, ( bp::arg("file") ) )
.def(
"Margin"
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::Vector & ) )(&GbdtRegressionPredictor_wrapper::Margin)
, ( bp::arg("features") ) )
.def(
"SaveCode_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string,::gezi::CodeType ) )(&::gezi::GbdtPredictor::SaveCode_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string,::gezi::CodeType ) )(&GbdtRegressionPredictor_wrapper::default_SaveCode_)
, ( bp::arg("file"), bp::arg("codeType") ) )
.def(
"SaveJson_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::SaveJson_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveJson_)
, ( bp::arg("file") ) )
.def(
"SaveXml_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::SaveXml_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveXml_)
, ( bp::arg("file") ) )
.def(
"Save_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::Save_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Save_)
, ( bp::arg("file") ) )
.def(
"ToGainSummary"
, (::std::string ( ::gezi::GbdtPredictor::* )( ::gezi::Vector & ) )(&::gezi::GbdtPredictor::ToGainSummary)
, (::std::string ( GbdtRegressionPredictor_wrapper::* )( ::gezi::Vector & ) )(&GbdtRegressionPredictor_wrapper::default_ToGainSummary)
, ( bp::arg("features") ) )
.def(
"Trees"
, (::std::vector<gezi::OnlineRegressionTree, std::allocator<gezi::OnlineRegressionTree> > & ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::Trees)
, bp::return_internal_reference<>());
}
