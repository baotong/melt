/** 
 *  ==============================================================================
 * 
 *          \file   test_normalizer_online.cc
 *
 *        \author   chenghuige   
 *
 *          \date   2015-12-29 15:31:01.668149
 *  
 *  \Description:
 *
 *  ==============================================================================
 */

#define private public
#define protected public
#include "common_util.h"
#include "Prediction/Normalization/MinMaxNormalizer.h"
#include "Prediction/Normalization/NormalizerFactory.h"
#include "MLCore/PredictorFactory.h"

using namespace std;
using namespace gezi;

DEFINE_int32(vl, 0, "vlog level");
DEFINE_int32(level, 0, "min log level");
DEFINE_string(type, "simple", "");
DEFINE_bool(perf,false, "");
DEFINE_int32(num, 1, "");
DEFINE_string(i, "", "input file");
DEFINE_string(o, "", "output file");

void run()
{
	Vector fe("45:3.7485,85:3.27441,381:2.51408,388:2.52328,1202:6.85911,1260:9.52492,1266:4.3627,2131:25.6265,2451:4.34951,2483:5.42246,2897:7.97864,10548:13.0295,12816:9.56908,31398:14.0173,32826:11.2447,32827:7.27295,56706:8.14005,102241:6.79457,105754:12.6181,119322:7.95773,149292:9.00755,151954:7.89319,166830:7.24805,262876:16.2801,267709:8.46855,286234:7.73458,286263:15.5508,286264:8.16025,392797:16.677,406985:13.3816,406986:7.32468,406989:15.3152,407569:8.83319,409902:7.97453,442644:15.9833,442645:16.0895,451990:8.52571,505755:16.3205,505756:16.3205,631262:16.3205,631297:16.2801,830758:16.8823,914355:8.65087,1051214:8.79397,1143142:8.83319,1143143:8.00902,1143144:8.20192,1143145:8.18087,1143146:8.65087,1143147:8.58633,1143148:17.1727,1143151:8.29087,1143152:16.4038,1143153:8.75623,1143155:9.1617,1143156:16.3617,1143157:16.3617,1143161:16.3617,1143162:17.3017,1143163:17.3017,1143164:17.2362,1143165:17.1727,1143166:17.1727,1143167:8.58633,1143168:8.18087,1143169:8.58633,1143172:8.20192,1143173:8.20192,1143174:16.3617,1143175:16.3617,1143180:16.3617,1143181:16.3617,1143182:8.18087,1143183:8.58633,1143184:17.1727,1143185:8.58633,1143186:8.18087,1803082:19.7097,3039712:11.3589,3614404:9.48712,3614405:9.48712,3614406:9.48712,3614407:9.48712,4031994:2.18294,4032172:5.31798,4032290:5.02816,4032297:5.04656,4033395:5.8631,4033519:5.2534,4033566:8.22876,4033582:5.82159,4033615:8.8403,4033645:6.43838,4033681:3.49143,4033750:6.97446,4033800:8.56454,4033801:8.77826,4033803:8.23584,4033810:16.723,4034392:5.42246,4034692:7.5417,4035451:4.51092,4035472:8.52688,4035952:10.5903,4036096:4.55764,4037711:7.92212,4038566:14.2936,4038963:15.433,4039091:14.7689,4039866:4.4946,4039870:3.81804,4044237:5.49104,4046546:5.71524,4046781:6.36849,4046868:6.71614,4047945:4.4587,4049346:13.3078,4049348:12.3153,4051557:10.7677,4053255:11.5471,4055021:9.10862,4057887:5.59687,4061350:5.7944,4062429:17.2362,4065814:6.23794,4074205:13.391,4075686:12.7506,4081954:8.14005,4083780:21.0454,4083781:7.60942,4084258:17.748,4096628:18.1127,4096629:9.85485,4099729:21.3316,4116926:7.60942,4116942:12.7438,4117157:12.4171,4119796:10.9535,4119799:10.2603,4126973:8.3385,4127517:17.9221,4129845:22.7178,4140452:7.49819,4162791:16.9371,4186466:13.0295,4216606:7.67004,4216607:7.65762,4222393:15.7248,4222439:8.96103,4223434:9.41301,4227951:17.6664,4253535:16.0895,4311279:20.8852,4313027:8.38851,4326104:17.4397,4347267:18.4377,4349856:7.89319,4403086:29.0583,4410446:10.4426,4434362:22.7178,4496935:20.2124,4546843:9.74949,4603001:10.2603,4635908:17.3017,4829755:17.4397,4839977:8.49672,4891710:7.99163,4986918:20.5206,5005030:9.1617,5069456:9.97263,5105026:9.21886,5152709:10.6658,5175132:15.9155,5175133:15.9491,5175134:15.9491,5186840:9.41301,5186841:15.3401,5186842:15.8499,5186843:15.7554,5186847:15.4427,5186848:9.41301,5186850:8.29087,5186858:17.5125,5186878:9.41301,5186880:8.29087,5186881:18.826,5186882:9.41301,5186884:8.29087,5198035:9.00755,5198036:19.499,5198037:9.74949,5230075:9.85485,5254720:18.559,5254726:10.6658,5254728:10.6658,5254750:9.56716,5254753:9.56716,5254758:9.56716,5254759:9.56716,5254760:9.41301,5254767:9.56716,5254768:9.56716,5254781:19.1343,5254823:9.56716,5391678:10.4426,6832051:22.7178,7110541:11.3589,7668179:22.7178,7799156:11.3589,7799169:12.0521,7799170:12.0521,7799173:12.0521,7799174:12.0521,7799175:12.0521,7799180:24.1042,7799181:24.1042,7799182:24.1042,7799183:24.1042,7799184:24.1042,7799185:24.1042,7799186:24.1042,7799187:24.1042,7799188:12.0521,7799189:12.0521,7799193:12.0521,7799194:22.7178,7799195:24.1042,7799196:24.1042,7799197:24.1042,7799198:24.1042,7799199:12.0521,7799200:12.0521,7799201:12.0521");
	Pval(fe.str());
	auto predictor = PredictorFactory::LoadPredictor("./data/ltrate.thread.model/");
	//Pval(predictor->Predict(fe));
	Pval((predictor->GetNormalizer()->NormalizeCopy(fe)).str());
	//predictor->GetNormalizer()->Normalize(fe);
	//Pval(fe.str());
	//auto normalizer = NormalizerFactory::CreateNormalizer("minmax", "./normalizer.bin");

	//@FIXME why wrong.... 和上面的有什么区别吗。。。？？？
	auto normalizer = NormalizerFactory::CreateNormalizer("minmax", "./data/ltrate.thread.model/normalizer.bin");
	auto fe2 = normalizer->NormalizeCopy(fe);
	Pval(fe2.str());
	//normalizer->Normalize(fe);
	//Pval(fe.str());
}

int main(int argc, char *argv[])
{
		google::InitGoogleLogging(argv[0]);
		google::InstallFailureSignalHandler();
		google::SetVersionString(get_version());
		int s = google::ParseCommandLineFlags(&argc, &argv, false);
		if (FLAGS_log_dir.empty())
				FLAGS_logtostderr = true;
		FLAGS_minloglevel = FLAGS_level;
		//LogHelper::set_level(FLAGS_level);
		if (FLAGS_v == 0)
				FLAGS_v = FLAGS_vl;

		run();

	 return 0;
}
