#define private public
#define protected public
#include "python_util.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "common_util.h"

#include "Prediction/Instances/FeatureNamesVector.h"

#include "Trainers/Gbdt/OnlineRegressionTree.h"

#include "Predictors/GbdtPredictor.h"

#include "MLCore/Predictor.h"

#include "Numeric/Vector/Vector.h"

namespace bp = boost::python;

struct Predictor_wrapper : gezi::Predictor, bp::wrapper< gezi::Predictor > {

Predictor_wrapper(gezi::Predictor const & arg )
: gezi::Predictor( arg )
, bp::wrapper< gezi::Predictor >(){
// copy constructor

}

Predictor_wrapper( )
: gezi::Predictor( )
, bp::wrapper< gezi::Predictor >(){
// null constructor

}

Predictor_wrapper(::gezi::NormalizerPtr normalizer, ::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
: gezi::Predictor( normalizer, calibrator, boost::ref(featureNames) )
, bp::wrapper< gezi::Predictor >(){
// constructor

}

Predictor_wrapper(::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
: gezi::Predictor( calibrator, boost::ref(featureNames) )
, bp::wrapper< gezi::Predictor >(){
// constructor

}

Predictor_wrapper(::gezi::FeatureNamesVector const & featureNames )
: gezi::Predictor( boost::ref(featureNames) )
, bp::wrapper< gezi::Predictor >(){
// constructor

}

virtual bool CustomLoad( ::std::string path ) {
if( bp::override func_CustomLoad = this->get_override( "CustomLoad" ) )
return func_CustomLoad( path );
else
return this->gezi::Predictor::CustomLoad( path );
}


bool default_CustomLoad( ::std::string path ) {
return gezi::Predictor::CustomLoad( path );
}

virtual bool CustomLoad_( ::std::string path ) {
if( bp::override func_CustomLoad_ = this->get_override( "CustomLoad_" ) )
return func_CustomLoad_( path );
else
return this->gezi::Predictor::CustomLoad_( path );
}


bool default_CustomLoad_( ::std::string path ) {
return gezi::Predictor::CustomLoad_( path );
}

virtual void CustomSave(  ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave(  );
else
this->gezi::Predictor::CustomSave(  );
}


void default_CustomSave(  ) {
gezi::Predictor::CustomSave( );
}

virtual void CustomSave( ::std::string path ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave( path );
else
this->gezi::Predictor::CustomSave( path );
}


void default_CustomSave( ::std::string path ) {
gezi::Predictor::CustomSave( path );
}

virtual void CustomSave_( ::std::string path ) {
if( bp::override func_CustomSave_ = this->get_override( "CustomSave_" ) )
func_CustomSave_( path );
else
this->gezi::Predictor::CustomSave_( path );
}


void default_CustomSave_( ::std::string path ) {
gezi::Predictor::CustomSave_( path );
}

virtual ::gezi::PredictionKind GetPredictionKind(  ) {
if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
return func_GetPredictionKind(  );
else
return this->gezi::Predictor::GetPredictionKind(  );
}


::gezi::PredictionKind default_GetPredictionKind(  ) {
return gezi::Predictor::GetPredictionKind( );
}

virtual bool Load( ::std::string path ) {
if( bp::override func_Load = this->get_override( "Load" ) )
return func_Load( path );
else
return this->gezi::Predictor::Load( path );
}


bool default_Load( ::std::string path ) {
return gezi::Predictor::Load( path );
}

virtual bool LoadBin( ::std::string path ) {
if( bp::override func_LoadBin = this->get_override( "LoadBin" ) )
return func_LoadBin( path );
else
return this->gezi::Predictor::LoadBin( path );
}


bool default_LoadBin( ::std::string path ) {
return gezi::Predictor::LoadBin( path );
}

virtual bool LoadText( ::std::string path ) {
if( bp::override func_LoadText = this->get_override( "LoadText" ) )
return func_LoadText( path );
else
return this->gezi::Predictor::LoadText( path );
}


bool default_LoadText( ::std::string path ) {
return gezi::Predictor::LoadText( path );
}

virtual bool LoadText_( ::std::string file ) {
if( bp::override func_LoadText_ = this->get_override( "LoadText_" ) )
return func_LoadText_( file );
else
return this->gezi::Predictor::LoadText_( file );
}


bool default_LoadText_( ::std::string file ) {
return gezi::Predictor::LoadText_( file );
}

virtual bool Load_( ::std::string file ) {
if( bp::override func_Load_ = this->get_override( "Load_" ) )
return func_Load_( file );
else
return this->gezi::Predictor::Load_( file );
}


bool default_Load_( ::std::string file ) {
return gezi::Predictor::Load_( file );
}

virtual ::Float Margin( ::gezi::Vector & features ){
if( bp::override func_Margin = this->get_override( "Margin" ) )
return func_Margin( boost::ref(features) );
else
return this->gezi::Predictor::Margin( boost::ref(features) );
}

virtual ::std::string Name(  ) {
if( bp::override func_Name = this->get_override( "Name" ) )
return func_Name(  );
else
return this->gezi::Predictor::Name(  );
}


::std::string default_Name(  ) {
return gezi::Predictor::Name( );
}

virtual ::Float Output( ::gezi::InstancePtr instance ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( instance );
else
return this->gezi::Predictor::Output( instance );
}


::Float default_Output( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Output( instance );
}

virtual ::Float Output( ::std::string line ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( line );
else
return this->gezi::Predictor::Output( line );
}


::Float default_Output( ::std::string line ) {
return gezi::Predictor::Output( line );
}

virtual ::Float Predict( ::std::string line, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( line, output );
else
return this->gezi::Predictor::Predict( line, output );
}


::Float default_Predict( ::std::string line, ::Float & output ) {
return gezi::Predictor::Predict( line, output );
}

virtual ::Float Predict( ::gezi::InstancePtr instance ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance );
else
return this->gezi::Predictor::Predict( instance );
}


::Float default_Predict( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Predict( instance );
}

virtual ::Float Predict( ::gezi::Vector & features ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( boost::ref(features) );
else
return this->gezi::Predictor::Predict( boost::ref(features) );
}


::Float default_Predict( ::gezi::Vector & features ) {
return gezi::Predictor::Predict( boost::ref(features) );
}

virtual ::Float Predict( ::gezi::InstancePtr instance, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance, output );
else
return this->gezi::Predictor::Predict( instance, output );
}


::Float default_Predict( ::gezi::InstancePtr instance, ::Float & output ) {
return gezi::Predictor::Predict( instance, output );
}

virtual void Save(  ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save(  );
else
this->gezi::Predictor::Save(  );
}


void default_Save(  ) {
gezi::Predictor::Save( );
}

virtual void Save( ::std::string path ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save( path );
else
this->gezi::Predictor::Save( path );
}


void default_Save( ::std::string path ) {
gezi::Predictor::Save( path );
}

virtual void SaveBin( ::std::string path ) {
if( bp::override func_SaveBin = this->get_override( "SaveBin" ) )
func_SaveBin( path );
else
this->gezi::Predictor::SaveBin( path );
}


void default_SaveBin( ::std::string path ) {
gezi::Predictor::SaveBin( path );
}

virtual void SaveCode( ::std::string codeTypeStr="cpp" ) {
if( bp::override func_SaveCode = this->get_override( "SaveCode" ) )
func_SaveCode( codeTypeStr );
else
this->gezi::Predictor::SaveCode( codeTypeStr );
}


void default_SaveCode( ::std::string codeTypeStr="cpp" ) {
gezi::Predictor::SaveCode( codeTypeStr );
}

virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
func_SaveCode_( file, codeType );
else
this->gezi::Predictor::SaveCode_( file, codeType );
}


void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
gezi::Predictor::SaveCode_( file, codeType );
}

virtual void SaveFeaturesGain( int topNum=0 ) {
if( bp::override func_SaveFeaturesGain = this->get_override( "SaveFeaturesGain" ) )
func_SaveFeaturesGain( topNum );
else
this->gezi::Predictor::SaveFeaturesGain( topNum );
}


void default_SaveFeaturesGain( int topNum=0 ) {
gezi::Predictor::SaveFeaturesGain( topNum );
}

virtual void SaveJson( ::std::string file ) {
if( bp::override func_SaveJson = this->get_override( "SaveJson" ) )
func_SaveJson( file );
else
this->gezi::Predictor::SaveJson( file );
}


void default_SaveJson( ::std::string file ) {
gezi::Predictor::SaveJson( file );
}

virtual void SaveJson_( ::std::string file ) {
if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
func_SaveJson_( file );
else
this->gezi::Predictor::SaveJson_( file );
}


void default_SaveJson_( ::std::string file ) {
gezi::Predictor::SaveJson_( file );
}

virtual void SaveText( ::std::string file ) {
if( bp::override func_SaveText = this->get_override( "SaveText" ) )
func_SaveText( file );
else
this->gezi::Predictor::SaveText( file );
}


void default_SaveText( ::std::string file ) {
gezi::Predictor::SaveText( file );
}

virtual void SaveText_( ::std::string file ) {
if( bp::override func_SaveText_ = this->get_override( "SaveText_" ) )
func_SaveText_( file );
else
this->gezi::Predictor::SaveText_( file );
}


void default_SaveText_( ::std::string file ) {
gezi::Predictor::SaveText_( file );
}

virtual void SaveXml( ::std::string file ) {
if( bp::override func_SaveXml = this->get_override( "SaveXml" ) )
func_SaveXml( file );
else
this->gezi::Predictor::SaveXml( file );
}


void default_SaveXml( ::std::string file ) {
gezi::Predictor::SaveXml( file );
}

virtual void SaveXml_( ::std::string file ) {
if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
func_SaveXml_( file );
else
this->gezi::Predictor::SaveXml_( file );
}


void default_SaveXml_( ::std::string file ) {
gezi::Predictor::SaveXml_( file );
}

virtual void Save_( ::std::string file ) {
if( bp::override func_Save_ = this->get_override( "Save_" ) )
func_Save_( file );
else
this->gezi::Predictor::Save_( file );
}


void default_Save_( ::std::string file ) {
gezi::Predictor::Save_( file );
}

virtual ::std::string ToFeaturesGainSummary( int topNum=0 ) {
if( bp::override func_ToFeaturesGainSummary = this->get_override( "ToFeaturesGainSummary" ) )
return func_ToFeaturesGainSummary( topNum );
else
return this->gezi::Predictor::ToFeaturesGainSummary( topNum );
}


::std::string default_ToFeaturesGainSummary( int topNum=0 ) {
return gezi::Predictor::ToFeaturesGainSummary( topNum );
}

virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
return func_ToGainSummary( boost::ref(features) );
else
return this->gezi::Predictor::ToGainSummary( boost::ref(features) );
}


::std::string default_ToGainSummary( ::gezi::Vector & features ) {
return gezi::Predictor::ToGainSummary( boost::ref(features) );
}

};

struct GbdtPredictor_wrapper : gezi::GbdtPredictor, bp::wrapper< gezi::GbdtPredictor > {

GbdtPredictor_wrapper(gezi::GbdtPredictor const & arg )
: gezi::GbdtPredictor( arg )
, bp::wrapper< gezi::GbdtPredictor >(){
// copy constructor

}

GbdtPredictor_wrapper( )
: gezi::GbdtPredictor( )
, bp::wrapper< gezi::GbdtPredictor >(){
// null constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees, ::gezi::CalibratorPtr calibrator, ::gezi::FeatureNamesVector const & featureNames )
: gezi::GbdtPredictor( boost::ref(trees), calibrator, boost::ref(featureNames) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees, ::gezi::FeatureNamesVector const & featureNames )
: gezi::GbdtPredictor( boost::ref(trees), boost::ref(featureNames) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::vector< gezi::OnlineRegressionTree > & trees )
: gezi::GbdtPredictor( boost::ref(trees) )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

GbdtPredictor_wrapper(::std::string modelPath )
: gezi::GbdtPredictor( modelPath )
, bp::wrapper< gezi::GbdtPredictor >(){
// constructor

}

virtual bool CustomLoad_( ::std::string path ) {
if( bp::override func_CustomLoad_ = this->get_override( "CustomLoad_" ) )
return func_CustomLoad_( path );
else
return this->gezi::GbdtPredictor::CustomLoad_( path );
}


bool default_CustomLoad_( ::std::string path ) {
return gezi::GbdtPredictor::CustomLoad_( path );
}

virtual void CustomSave_( ::std::string path ) {
if( bp::override func_CustomSave_ = this->get_override( "CustomSave_" ) )
func_CustomSave_( path );
else
this->gezi::GbdtPredictor::CustomSave_( path );
}


void default_CustomSave_( ::std::string path ) {
gezi::GbdtPredictor::CustomSave_( path );
}

virtual bool LoadText( ::std::string file ) {
if( bp::override func_LoadText = this->get_override( "LoadText" ) )
return func_LoadText( file );
else
return this->gezi::GbdtPredictor::LoadText( file );
}


bool default_LoadText( ::std::string file ) {
return gezi::GbdtPredictor::LoadText( file );
}

virtual bool Load_( ::std::string file ) {
if( bp::override func_Load_ = this->get_override( "Load_" ) )
return func_Load_( file );
else
return this->gezi::GbdtPredictor::Load_( file );
}


bool default_Load_( ::std::string file ) {
return gezi::GbdtPredictor::Load_( file );
}

virtual ::Float Margin( ::gezi::Vector & features ){
if( bp::override func_Margin = this->get_override( "Margin" ) )
return func_Margin( boost::ref(features) );
else
return this->gezi::GbdtPredictor::Margin( boost::ref(features) );
}

virtual ::std::string Name(  ) {
if( bp::override func_Name = this->get_override( "Name" ) )
return func_Name(  );
else
return this->gezi::GbdtPredictor::Name(  );
}


::std::string default_Name(  ) {
return gezi::GbdtPredictor::Name( );
}

virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
func_SaveCode_( file, codeType );
else
this->gezi::GbdtPredictor::SaveCode_( file, codeType );
}


void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
gezi::GbdtPredictor::SaveCode_( file, codeType );
}

virtual void SaveJson_( ::std::string file ) {
if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
func_SaveJson_( file );
else
this->gezi::GbdtPredictor::SaveJson_( file );
}


void default_SaveJson_( ::std::string file ) {
gezi::GbdtPredictor::SaveJson_( file );
}

virtual void SaveXml_( ::std::string file ) {
if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
func_SaveXml_( file );
else
this->gezi::GbdtPredictor::SaveXml_( file );
}


void default_SaveXml_( ::std::string file ) {
gezi::GbdtPredictor::SaveXml_( file );
}

virtual void Save_( ::std::string file ) {
if( bp::override func_Save_ = this->get_override( "Save_" ) )
func_Save_( file );
else
this->gezi::GbdtPredictor::Save_( file );
}


void default_Save_( ::std::string file ) {
gezi::GbdtPredictor::Save_( file );
}

virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
return func_ToGainSummary( boost::ref(features) );
else
return this->gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}


::std::string default_ToGainSummary( ::gezi::Vector & features ) {
return gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}

::std::vector< gezi::OnlineRegressionTree > & Trees(  ){
return gezi::GbdtPredictor::Trees(  );
}

::std::vector< gezi::OnlineRegressionTree > const & Trees(  ) const {
return gezi::GbdtPredictor::Trees(  );
}

virtual bool CustomLoad( ::std::string path ) {
if( bp::override func_CustomLoad = this->get_override( "CustomLoad" ) )
return func_CustomLoad( path );
else
return this->gezi::Predictor::CustomLoad( path );
}


bool default_CustomLoad( ::std::string path ) {
return gezi::Predictor::CustomLoad( path );
}

virtual void CustomSave(  ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave(  );
else
this->gezi::Predictor::CustomSave(  );
}


void default_CustomSave(  ) {
gezi::Predictor::CustomSave( );
}

virtual void CustomSave( ::std::string path ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave( path );
else
this->gezi::Predictor::CustomSave( path );
}


void default_CustomSave( ::std::string path ) {
gezi::Predictor::CustomSave( path );
}

virtual ::gezi::PredictionKind GetPredictionKind(  ) {
if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
return func_GetPredictionKind(  );
else
return this->gezi::Predictor::GetPredictionKind(  );
}


::gezi::PredictionKind default_GetPredictionKind(  ) {
return gezi::Predictor::GetPredictionKind( );
}

virtual bool Load( ::std::string path ) {
if( bp::override func_Load = this->get_override( "Load" ) )
return func_Load( path );
else
return this->gezi::Predictor::Load( path );
}


bool default_Load( ::std::string path ) {
return gezi::Predictor::Load( path );
}

virtual bool LoadBin( ::std::string path ) {
if( bp::override func_LoadBin = this->get_override( "LoadBin" ) )
return func_LoadBin( path );
else
return this->gezi::Predictor::LoadBin( path );
}


bool default_LoadBin( ::std::string path ) {
return gezi::Predictor::LoadBin( path );
}

virtual bool LoadText_( ::std::string file ) {
if( bp::override func_LoadText_ = this->get_override( "LoadText_" ) )
return func_LoadText_( file );
else
return this->gezi::Predictor::LoadText_( file );
}


bool default_LoadText_( ::std::string file ) {
return gezi::Predictor::LoadText_( file );
}

virtual ::Float Output( ::gezi::InstancePtr instance ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( instance );
else
return this->gezi::Predictor::Output( instance );
}


::Float default_Output( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Output( instance );
}

virtual ::Float Output( ::std::string line ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( line );
else
return this->gezi::Predictor::Output( line );
}


::Float default_Output( ::std::string line ) {
return gezi::Predictor::Output( line );
}

virtual ::Float Predict( ::std::string line, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( line, output );
else
return this->gezi::Predictor::Predict( line, output );
}


::Float default_Predict( ::std::string line, ::Float & output ) {
return gezi::Predictor::Predict( line, output );
}

virtual ::Float Predict( ::gezi::InstancePtr instance ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance );
else
return this->gezi::Predictor::Predict( instance );
}


::Float default_Predict( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Predict( instance );
}

virtual ::Float Predict( ::gezi::Vector & features ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( boost::ref(features) );
else
return this->gezi::Predictor::Predict( boost::ref(features) );
}


::Float default_Predict( ::gezi::Vector & features ) {
return gezi::Predictor::Predict( boost::ref(features) );
}

virtual ::Float Predict( ::gezi::InstancePtr instance, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance, output );
else
return this->gezi::Predictor::Predict( instance, output );
}


::Float default_Predict( ::gezi::InstancePtr instance, ::Float & output ) {
return gezi::Predictor::Predict( instance, output );
}

virtual void Save(  ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save(  );
else
this->gezi::Predictor::Save(  );
}


void default_Save(  ) {
gezi::Predictor::Save( );
}

virtual void Save( ::std::string path ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save( path );
else
this->gezi::Predictor::Save( path );
}


void default_Save( ::std::string path ) {
gezi::Predictor::Save( path );
}

virtual void SaveBin( ::std::string path ) {
if( bp::override func_SaveBin = this->get_override( "SaveBin" ) )
func_SaveBin( path );
else
this->gezi::Predictor::SaveBin( path );
}


void default_SaveBin( ::std::string path ) {
gezi::Predictor::SaveBin( path );
}

virtual void SaveCode( ::std::string codeTypeStr="cpp" ) {
if( bp::override func_SaveCode = this->get_override( "SaveCode" ) )
func_SaveCode( codeTypeStr );
else
this->gezi::Predictor::SaveCode( codeTypeStr );
}


void default_SaveCode( ::std::string codeTypeStr="cpp" ) {
gezi::Predictor::SaveCode( codeTypeStr );
}

virtual void SaveFeaturesGain( int topNum=0 ) {
if( bp::override func_SaveFeaturesGain = this->get_override( "SaveFeaturesGain" ) )
func_SaveFeaturesGain( topNum );
else
this->gezi::Predictor::SaveFeaturesGain( topNum );
}


void default_SaveFeaturesGain( int topNum=0 ) {
gezi::Predictor::SaveFeaturesGain( topNum );
}

virtual void SaveJson( ::std::string file ) {
if( bp::override func_SaveJson = this->get_override( "SaveJson" ) )
func_SaveJson( file );
else
this->gezi::Predictor::SaveJson( file );
}


void default_SaveJson( ::std::string file ) {
gezi::Predictor::SaveJson( file );
}

virtual void SaveText( ::std::string file ) {
if( bp::override func_SaveText = this->get_override( "SaveText" ) )
func_SaveText( file );
else
this->gezi::Predictor::SaveText( file );
}


void default_SaveText( ::std::string file ) {
gezi::Predictor::SaveText( file );
}

virtual void SaveText_( ::std::string file ) {
if( bp::override func_SaveText_ = this->get_override( "SaveText_" ) )
func_SaveText_( file );
else
this->gezi::Predictor::SaveText_( file );
}


void default_SaveText_( ::std::string file ) {
gezi::Predictor::SaveText_( file );
}

virtual void SaveXml( ::std::string file ) {
if( bp::override func_SaveXml = this->get_override( "SaveXml" ) )
func_SaveXml( file );
else
this->gezi::Predictor::SaveXml( file );
}


void default_SaveXml( ::std::string file ) {
gezi::Predictor::SaveXml( file );
}

virtual ::std::string ToFeaturesGainSummary( int topNum=0 ) {
if( bp::override func_ToFeaturesGainSummary = this->get_override( "ToFeaturesGainSummary" ) )
return func_ToFeaturesGainSummary( topNum );
else
return this->gezi::Predictor::ToFeaturesGainSummary( topNum );
}


::std::string default_ToFeaturesGainSummary( int topNum=0 ) {
return gezi::Predictor::ToFeaturesGainSummary( topNum );
}

};

struct GbdtRegressionPredictor_wrapper : gezi::GbdtRegressionPredictor, bp::wrapper< gezi::GbdtRegressionPredictor > {

GbdtRegressionPredictor_wrapper(gezi::GbdtRegressionPredictor const & arg )
: gezi::GbdtRegressionPredictor( arg )
, bp::wrapper< gezi::GbdtRegressionPredictor >(){
// copy constructor

}

GbdtRegressionPredictor_wrapper()
: gezi::GbdtRegressionPredictor()
, bp::wrapper< gezi::GbdtRegressionPredictor >(){
// null constructor

}

virtual ::gezi::PredictionKind GetPredictionKind(  ) {
if( bp::override func_GetPredictionKind = this->get_override( "GetPredictionKind" ) )
return func_GetPredictionKind(  );
else
return this->gezi::GbdtRegressionPredictor::GetPredictionKind(  );
}


::gezi::PredictionKind default_GetPredictionKind(  ) {
return gezi::GbdtRegressionPredictor::GetPredictionKind( );
}

virtual ::std::string Name(  ) {
if( bp::override func_Name = this->get_override( "Name" ) )
return func_Name(  );
else
return this->gezi::GbdtRegressionPredictor::Name(  );
}


::std::string default_Name(  ) {
return gezi::GbdtRegressionPredictor::Name( );
}

virtual bool CustomLoad( ::std::string path ) {
if( bp::override func_CustomLoad = this->get_override( "CustomLoad" ) )
return func_CustomLoad( path );
else
return this->gezi::Predictor::CustomLoad( path );
}


bool default_CustomLoad( ::std::string path ) {
return gezi::Predictor::CustomLoad( path );
}

virtual bool CustomLoad_( ::std::string path ) {
if( bp::override func_CustomLoad_ = this->get_override( "CustomLoad_" ) )
return func_CustomLoad_( path );
else
return this->gezi::GbdtPredictor::CustomLoad_( path );
}


bool default_CustomLoad_( ::std::string path ) {
return gezi::GbdtPredictor::CustomLoad_( path );
}

virtual void CustomSave(  ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave(  );
else
this->gezi::Predictor::CustomSave(  );
}


void default_CustomSave(  ) {
gezi::Predictor::CustomSave( );
}

virtual void CustomSave( ::std::string path ) {
if( bp::override func_CustomSave = this->get_override( "CustomSave" ) )
func_CustomSave( path );
else
this->gezi::Predictor::CustomSave( path );
}


void default_CustomSave( ::std::string path ) {
gezi::Predictor::CustomSave( path );
}

virtual void CustomSave_( ::std::string path ) {
if( bp::override func_CustomSave_ = this->get_override( "CustomSave_" ) )
func_CustomSave_( path );
else
this->gezi::GbdtPredictor::CustomSave_( path );
}


void default_CustomSave_( ::std::string path ) {
gezi::GbdtPredictor::CustomSave_( path );
}

virtual bool Load( ::std::string path ) {
if( bp::override func_Load = this->get_override( "Load" ) )
return func_Load( path );
else
return this->gezi::Predictor::Load( path );
}


bool default_Load( ::std::string path ) {
return gezi::Predictor::Load( path );
}

virtual bool LoadBin( ::std::string path ) {
if( bp::override func_LoadBin = this->get_override( "LoadBin" ) )
return func_LoadBin( path );
else
return this->gezi::Predictor::LoadBin( path );
}


bool default_LoadBin( ::std::string path ) {
return gezi::Predictor::LoadBin( path );
}

virtual bool LoadText( ::std::string file ) {
if( bp::override func_LoadText = this->get_override( "LoadText" ) )
return func_LoadText( file );
else
return this->gezi::GbdtPredictor::LoadText( file );
}


bool default_LoadText( ::std::string file ) {
return gezi::GbdtPredictor::LoadText( file );
}

virtual bool LoadText_( ::std::string file ) {
if( bp::override func_LoadText_ = this->get_override( "LoadText_" ) )
return func_LoadText_( file );
else
return this->gezi::Predictor::LoadText_( file );
}


bool default_LoadText_( ::std::string file ) {
return gezi::Predictor::LoadText_( file );
}

virtual bool Load_( ::std::string file ) {
if( bp::override func_Load_ = this->get_override( "Load_" ) )
return func_Load_( file );
else
return this->gezi::GbdtPredictor::Load_( file );
}


bool default_Load_( ::std::string file ) {
return gezi::GbdtPredictor::Load_( file );
}

virtual ::Float Margin( ::gezi::Vector & features ){
if( bp::override func_Margin = this->get_override( "Margin" ) )
return func_Margin( boost::ref(features) );
else
return this->gezi::GbdtPredictor::Margin( boost::ref(features) );
}

virtual ::Float Output( ::gezi::InstancePtr instance ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( instance );
else
return this->gezi::Predictor::Output( instance );
}


::Float default_Output( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Output( instance );
}

virtual ::Float Output( ::std::string line ) {
if( bp::override func_Output = this->get_override( "Output" ) )
return func_Output( line );
else
return this->gezi::Predictor::Output( line );
}


::Float default_Output( ::std::string line ) {
return gezi::Predictor::Output( line );
}

virtual ::Float Predict( ::std::string line, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( line, output );
else
return this->gezi::Predictor::Predict( line, output );
}


::Float default_Predict( ::std::string line, ::Float & output ) {
return gezi::Predictor::Predict( line, output );
}

virtual ::Float Predict( ::gezi::InstancePtr instance ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance );
else
return this->gezi::Predictor::Predict( instance );
}


::Float default_Predict( ::gezi::InstancePtr instance ) {
return gezi::Predictor::Predict( instance );
}

virtual ::Float Predict( ::gezi::Vector & features ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( boost::ref(features) );
else
return this->gezi::Predictor::Predict( boost::ref(features) );
}


::Float default_Predict( ::gezi::Vector & features ) {
return gezi::Predictor::Predict( boost::ref(features) );
}

virtual ::Float Predict( ::gezi::InstancePtr instance, ::Float & output ) {
if( bp::override func_Predict = this->get_override( "Predict" ) )
return func_Predict( instance, output );
else
return this->gezi::Predictor::Predict( instance, output );
}


::Float default_Predict( ::gezi::InstancePtr instance, ::Float & output ) {
return gezi::Predictor::Predict( instance, output );
}

virtual void Save(  ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save(  );
else
this->gezi::Predictor::Save(  );
}


void default_Save(  ) {
gezi::Predictor::Save( );
}

virtual void Save( ::std::string path ) {
if( bp::override func_Save = this->get_override( "Save" ) )
func_Save( path );
else
this->gezi::Predictor::Save( path );
}


void default_Save( ::std::string path ) {
gezi::Predictor::Save( path );
}

virtual void SaveBin( ::std::string path ) {
if( bp::override func_SaveBin = this->get_override( "SaveBin" ) )
func_SaveBin( path );
else
this->gezi::Predictor::SaveBin( path );
}


void default_SaveBin( ::std::string path ) {
gezi::Predictor::SaveBin( path );
}

virtual void SaveCode( ::std::string codeTypeStr="cpp" ) {
if( bp::override func_SaveCode = this->get_override( "SaveCode" ) )
func_SaveCode( codeTypeStr );
else
this->gezi::Predictor::SaveCode( codeTypeStr );
}


void default_SaveCode( ::std::string codeTypeStr="cpp" ) {
gezi::Predictor::SaveCode( codeTypeStr );
}

virtual void SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
if( bp::override func_SaveCode_ = this->get_override( "SaveCode_" ) )
func_SaveCode_( file, codeType );
else
this->gezi::GbdtPredictor::SaveCode_( file, codeType );
}


void default_SaveCode_( ::std::string file, ::gezi::CodeType codeType ) {
gezi::GbdtPredictor::SaveCode_( file, codeType );
}

virtual void SaveFeaturesGain( int topNum=0 ) {
if( bp::override func_SaveFeaturesGain = this->get_override( "SaveFeaturesGain" ) )
func_SaveFeaturesGain( topNum );
else
this->gezi::Predictor::SaveFeaturesGain( topNum );
}


void default_SaveFeaturesGain( int topNum=0 ) {
gezi::Predictor::SaveFeaturesGain( topNum );
}

virtual void SaveJson( ::std::string file ) {
if( bp::override func_SaveJson = this->get_override( "SaveJson" ) )
func_SaveJson( file );
else
this->gezi::Predictor::SaveJson( file );
}


void default_SaveJson( ::std::string file ) {
gezi::Predictor::SaveJson( file );
}

virtual void SaveJson_( ::std::string file ) {
if( bp::override func_SaveJson_ = this->get_override( "SaveJson_" ) )
func_SaveJson_( file );
else
this->gezi::GbdtPredictor::SaveJson_( file );
}


void default_SaveJson_( ::std::string file ) {
gezi::GbdtPredictor::SaveJson_( file );
}

virtual void SaveText( ::std::string file ) {
if( bp::override func_SaveText = this->get_override( "SaveText" ) )
func_SaveText( file );
else
this->gezi::Predictor::SaveText( file );
}


void default_SaveText( ::std::string file ) {
gezi::Predictor::SaveText( file );
}

virtual void SaveText_( ::std::string file ) {
if( bp::override func_SaveText_ = this->get_override( "SaveText_" ) )
func_SaveText_( file );
else
this->gezi::Predictor::SaveText_( file );
}


void default_SaveText_( ::std::string file ) {
gezi::Predictor::SaveText_( file );
}

virtual void SaveXml( ::std::string file ) {
if( bp::override func_SaveXml = this->get_override( "SaveXml" ) )
func_SaveXml( file );
else
this->gezi::Predictor::SaveXml( file );
}


void default_SaveXml( ::std::string file ) {
gezi::Predictor::SaveXml( file );
}

virtual void SaveXml_( ::std::string file ) {
if( bp::override func_SaveXml_ = this->get_override( "SaveXml_" ) )
func_SaveXml_( file );
else
this->gezi::GbdtPredictor::SaveXml_( file );
}


void default_SaveXml_( ::std::string file ) {
gezi::GbdtPredictor::SaveXml_( file );
}

virtual void Save_( ::std::string file ) {
if( bp::override func_Save_ = this->get_override( "Save_" ) )
func_Save_( file );
else
this->gezi::GbdtPredictor::Save_( file );
}


void default_Save_( ::std::string file ) {
gezi::GbdtPredictor::Save_( file );
}

virtual ::std::string ToFeaturesGainSummary( int topNum=0 ) {
if( bp::override func_ToFeaturesGainSummary = this->get_override( "ToFeaturesGainSummary" ) )
return func_ToFeaturesGainSummary( topNum );
else
return this->gezi::Predictor::ToFeaturesGainSummary( topNum );
}


::std::string default_ToFeaturesGainSummary( int topNum=0 ) {
return gezi::Predictor::ToFeaturesGainSummary( topNum );
}

virtual ::std::string ToGainSummary( ::gezi::Vector & features ) {
if( bp::override func_ToGainSummary = this->get_override( "ToGainSummary" ) )
return func_ToGainSummary( boost::ref(features) );
else
return this->gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}


::std::string default_ToGainSummary( ::gezi::Vector & features ) {
return gezi::GbdtPredictor::ToGainSummary( boost::ref(features) );
}

::std::vector< gezi::OnlineRegressionTree > & Trees(  ){
return gezi::GbdtPredictor::Trees(  );
}

::std::vector< gezi::OnlineRegressionTree > const & Trees(  ) const {
return gezi::GbdtPredictor::Trees(  );
}

};

struct OnlineRegressionTree_wrapper : gezi::OnlineRegressionTree, bp::wrapper< gezi::OnlineRegressionTree > {

OnlineRegressionTree_wrapper( )
: gezi::OnlineRegressionTree( )
, bp::wrapper< gezi::OnlineRegressionTree >(){
// null constructor

}

OnlineRegressionTree_wrapper(::gezi::OnlineRegressionTree const & arg0 )
: gezi::OnlineRegressionTree( boost::ref(arg0) )
, bp::wrapper< gezi::OnlineRegressionTree >(){
// copy constructor

}

static ::gezi::FeatureNamesVector * get__featureNames(gezi::OnlineRegressionTree const & inst ){
return inst._featureNames;
}

static void set__featureNames( gezi::OnlineRegressionTree & inst, ::gezi::FeatureNamesVector * new_value ){
inst._featureNames = new_value;
}

};

BOOST_PYTHON_MODULE(libgbdt){
DEF_VEC(ivec);
DEF_VEC(dvec);
DEF_VEC(uvec);
DEF_VEC(svec);
DEF_VEC(ulvec);
DEF_MAP(id_map);
DEF_MAP(sd_map);
DEF_MAP(si_map);
DEF_MAP(ss_map);
DEF_PAIR(ii_pair);
DEF_PAIR(si_pair);
DEF_PAIR(wsi_pair);
DEF_VEC(si_pair_vec);
DEF_VEC(wsi_pair_vec);
DEF_SET(iset);
DEF_SET(lset);
DEF_SET(ulset);

{ //::std::vector< std::string >
typedef bp::class_< std::vector< std::string > > vector_less__std_scope_string__greater__exposer_t;
vector_less__std_scope_string__greater__exposer_t vector_less__std_scope_string__greater__exposer = vector_less__std_scope_string__greater__exposer_t( "vector_less__std_scope_string__greater_" );
bp::scope vector_less__std_scope_string__greater__scope( vector_less__std_scope_string__greater__exposer );
vector_less__std_scope_string__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< std::string >, true >() )
VEC_METHOD(::std::vector< std::string >);
}

{ //::std::vector< int >
typedef bp::class_< std::vector< int > > ivec_exposer_t;
ivec_exposer_t ivec_exposer = ivec_exposer_t( "ivec" );
bp::scope ivec_scope( ivec_exposer );
ivec_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() )
VEC_METHOD(::std::vector< int >);
}

{ //::std::vector< int >
typedef bp::class_< std::vector< int > > ivec_exposer_t;
ivec_exposer_t ivec_exposer = ivec_exposer_t( "ivec" );
bp::scope ivec_scope( ivec_exposer );
ivec_exposer.def( bp::vector_indexing_suite< ::std::vector< int >, true >() )
VEC_METHOD(::std::vector< int >);
}

{ //::std::vector< gezi::OnlineRegressionTree >
typedef bp::class_< std::vector< gezi::OnlineRegressionTree > > vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t;
vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t vector_less__gezi_scope_OnlineRegressionTree__greater__exposer = vector_less__gezi_scope_OnlineRegressionTree__greater__exposer_t( "vector_less__gezi_scope_OnlineRegressionTree__greater_" );
bp::scope vector_less__gezi_scope_OnlineRegressionTree__greater__scope( vector_less__gezi_scope_OnlineRegressionTree__greater__exposer );
vector_less__gezi_scope_OnlineRegressionTree__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< gezi::OnlineRegressionTree > >() )
VEC_METHOD(::std::vector< gezi::OnlineRegressionTree >);
}

{ //::std::vector< double >
typedef bp::class_< std::vector< double >, boost::noncopyable > vector_less__double__greater__exposer_t;
vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() )
VEC_METHOD(::std::vector< double >);
}

{ //::std::vector< double >
typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
vector_less__double__greater__exposer.def( bp::vector_indexing_suite< ::std::vector< double >, true >() )
VEC_METHOD(::std::vector< double >);
}

bp::class_< std::map< std::string, double > >("map_less__std_scope_string_comma__double__greater_")
.def( bp::map_indexing_suite< ::std::map< std::string, double >, true >() )
MAP_METHOD(::std::map< std::string COMMA  double >);

bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")
.def( bp::map_indexing_suite< ::std::map< int, double >, true >() )
MAP_METHOD(::std::map< int COMMA  double >);

bp::class_< std::map< int, double > >("map_less__int_comma__double__greater_")
.def( bp::map_indexing_suite< ::std::map< int, double >, true >() )
MAP_METHOD(::std::map< int COMMA  double >);

bp::enum_< gezi::CodeType>("CodeType")
.value("C", gezi::CodeType::C)
.value("Python", gezi::CodeType::Python)
.value("Php", gezi::CodeType::Php)
.export_values()
;

{ //::gezi::FeatureNamesVector
typedef bp::class_< gezi::FeatureNamesVector > FeatureNamesVector_exposer_t;
FeatureNamesVector_exposer_t FeatureNamesVector_exposer = FeatureNamesVector_exposer_t( "FeatureNamesVector", bp::init< >() );
bp::scope FeatureNamesVector_scope( FeatureNamesVector_exposer );
FeatureNamesVector_exposer.def( bp::init< int >(( bp::arg("numFeatures") )) );
bp::implicitly_convertible< int, gezi::FeatureNamesVector >();
FeatureNamesVector_exposer.def( bp::init< svec const & >(( bp::arg("featureNames") )) );
bp::implicitly_convertible< svec const &, gezi::FeatureNamesVector >();
{ //::gezi::FeatureNamesVector::Load

typedef void ( ::gezi::FeatureNamesVector::*Load_function_type )( ::std::string ) ;

FeatureNamesVector_exposer.def(
"Load"
, Load_function_type( &::gezi::FeatureNamesVector::Load )
, ( bp::arg("file") ) );

}
{ //::gezi::FeatureNamesVector::Save

typedef void ( ::gezi::FeatureNamesVector::*Save_function_type )( ::std::string ) ;

FeatureNamesVector_exposer.def(
"Save"
, Save_function_type( &::gezi::FeatureNamesVector::Save )
, ( bp::arg("file") ) );

}
{ //::gezi::FeatureNamesVector::SetNumFeatures

typedef void ( ::gezi::FeatureNamesVector::*SetNumFeatures_function_type )( int ) ;

FeatureNamesVector_exposer.def(
"SetNumFeatures"
, SetNumFeatures_function_type( &::gezi::FeatureNamesVector::SetNumFeatures )
, ( bp::arg("numFeatures") ) );

}
{ //::gezi::FeatureNamesVector::at

typedef ::std::string ( ::gezi::FeatureNamesVector::*at_function_type )( int ) const;

FeatureNamesVector_exposer.def(
"at"
, at_function_type( &::gezi::FeatureNamesVector::at )
, ( bp::arg("index") ) );

}
{ //::gezi::FeatureNamesVector::empty

typedef bool ( ::gezi::FeatureNamesVector::*empty_function_type )(  ) ;

FeatureNamesVector_exposer.def(
"empty"
, empty_function_type( &::gezi::FeatureNamesVector::empty ) );

}
FeatureNamesVector_exposer.def( bp::self == bp::self );
{ //::gezi::FeatureNamesVector::operator[]

typedef ::std::string ( ::gezi::FeatureNamesVector::*__getitem___function_type )( int ) const;

FeatureNamesVector_exposer.def(
"__getitem__"
, __getitem___function_type( &::gezi::FeatureNamesVector::operator[] )
, ( bp::arg("index") ) );

}
{ //::gezi::FeatureNamesVector::push_back

typedef void ( ::gezi::FeatureNamesVector::*push_back_function_type )( ::std::string ) ;

FeatureNamesVector_exposer.def(
"push_back"
, push_back_function_type( &::gezi::FeatureNamesVector::push_back )
, ( bp::arg("name") ) );

}
{ //::gezi::FeatureNamesVector::size

typedef ::size_t ( ::gezi::FeatureNamesVector::*size_function_type )(  ) const;

FeatureNamesVector_exposer.def(
"size"
, size_function_type( &::gezi::FeatureNamesVector::size ) );

}
}

{ //::gezi::Predictor
typedef bp::class_< Predictor_wrapper > Predictor_exposer_t;
Predictor_exposer_t Predictor_exposer = Predictor_exposer_t( "Predictor", bp::init< >() );
bp::scope Predictor_scope( Predictor_exposer );
Predictor_exposer.def( bp::init< gezi::NormalizerPtr, gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("normalizer"), bp::arg("calibrator"), bp::arg("featureNames") )) );
Predictor_exposer.def( bp::init< gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("calibrator"), bp::arg("featureNames") )) );
Predictor_exposer.def( bp::init< gezi::FeatureNamesVector const & >(( bp::arg("featureNames") )) );
bp::implicitly_convertible< gezi::FeatureNamesVector const &, gezi::Predictor >();
{ //::gezi::Predictor::CustomLoad

typedef bool ( ::gezi::Predictor::*CustomLoad_function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_CustomLoad_function_type )( ::std::string ) ;

Predictor_exposer.def(
"CustomLoad"
, CustomLoad_function_type(&::gezi::Predictor::CustomLoad)
, default_CustomLoad_function_type(&Predictor_wrapper::default_CustomLoad)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::CustomLoad_

typedef bool ( ::gezi::Predictor::*CustomLoad__function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_CustomLoad__function_type )( ::std::string ) ;

Predictor_exposer.def(
"CustomLoad_"
, CustomLoad__function_type(&::gezi::Predictor::CustomLoad_)
, default_CustomLoad__function_type(&Predictor_wrapper::default_CustomLoad_)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::CustomSave

typedef void ( ::gezi::Predictor::*CustomSave_function_type )(  ) ;
typedef void ( Predictor_wrapper::*default_CustomSave_function_type )(  ) ;

Predictor_exposer.def(
"CustomSave"
, CustomSave_function_type(&::gezi::Predictor::CustomSave)
, default_CustomSave_function_type(&Predictor_wrapper::default_CustomSave) );

}
{ //::gezi::Predictor::CustomSave

typedef void ( ::gezi::Predictor::*CustomSave_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_CustomSave_function_type )( ::std::string ) ;

Predictor_exposer.def(
"CustomSave"
, CustomSave_function_type(&::gezi::Predictor::CustomSave)
, default_CustomSave_function_type(&Predictor_wrapper::default_CustomSave)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::CustomSave_

typedef void ( ::gezi::Predictor::*CustomSave__function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_CustomSave__function_type )( ::std::string ) ;

Predictor_exposer.def(
"CustomSave_"
, CustomSave__function_type(&::gezi::Predictor::CustomSave_)
, default_CustomSave__function_type(&Predictor_wrapper::default_CustomSave_)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::FeatureNames

typedef ::gezi::FeatureNamesVector const & ( ::gezi::Predictor::*FeatureNames_function_type )(  ) const;

Predictor_exposer.def(
"FeatureNames"
, FeatureNames_function_type( &::gezi::Predictor::FeatureNames )
, bp::return_value_policy< bp::copy_const_reference >() );

}
{ //::gezi::Predictor::GetCalibrator

typedef ::gezi::CalibratorPtr & ( ::gezi::Predictor::*GetCalibrator_function_type )(  ) ;

Predictor_exposer.def(
"GetCalibrator"
, GetCalibrator_function_type( &::gezi::Predictor::GetCalibrator )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::GetNormalizer

typedef ::gezi::NormalizerPtr & ( ::gezi::Predictor::*GetNormalizer_function_type )(  ) ;

Predictor_exposer.def(
"GetNormalizer"
, GetNormalizer_function_type( &::gezi::Predictor::GetNormalizer )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::GetParam

typedef ::std::string ( ::gezi::Predictor::*GetParam_function_type )(  ) ;

Predictor_exposer.def(
"GetParam"
, GetParam_function_type( &::gezi::Predictor::GetParam ) );

}
{ //::gezi::Predictor::GetPredictionKind

typedef ::gezi::PredictionKind ( ::gezi::Predictor::*GetPredictionKind_function_type )(  ) ;
typedef ::gezi::PredictionKind ( Predictor_wrapper::*default_GetPredictionKind_function_type )(  ) ;

Predictor_exposer.def(
"GetPredictionKind"
, GetPredictionKind_function_type(&::gezi::Predictor::GetPredictionKind)
, default_GetPredictionKind_function_type(&Predictor_wrapper::default_GetPredictionKind) );

}
{ //::gezi::Predictor::Load

typedef bool ( ::gezi::Predictor::*Load_function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_Load_function_type )( ::std::string ) ;

Predictor_exposer.def(
"Load"
, Load_function_type(&::gezi::Predictor::Load)
, default_Load_function_type(&Predictor_wrapper::default_Load)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadBin

typedef bool ( ::gezi::Predictor::*LoadBin_function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_LoadBin_function_type )( ::std::string ) ;

Predictor_exposer.def(
"LoadBin"
, LoadBin_function_type(&::gezi::Predictor::LoadBin)
, default_LoadBin_function_type(&Predictor_wrapper::default_LoadBin)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadNormalizerAndCalibrator

typedef bool ( ::gezi::Predictor::*LoadNormalizerAndCalibrator_function_type )( ::std::string ) ;

Predictor_exposer.def(
"LoadNormalizerAndCalibrator"
, LoadNormalizerAndCalibrator_function_type( &::gezi::Predictor::LoadNormalizerAndCalibrator )
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadText

typedef bool ( ::gezi::Predictor::*LoadText_function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_LoadText_function_type )( ::std::string ) ;

Predictor_exposer.def(
"LoadText"
, LoadText_function_type(&::gezi::Predictor::LoadText)
, default_LoadText_function_type(&Predictor_wrapper::default_LoadText)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadText_

typedef bool ( ::gezi::Predictor::*LoadText__function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_LoadText__function_type )( ::std::string ) ;

Predictor_exposer.def(
"LoadText_"
, LoadText__function_type(&::gezi::Predictor::LoadText_)
, default_LoadText__function_type(&Predictor_wrapper::default_LoadText_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::Load_

typedef bool ( ::gezi::Predictor::*Load__function_type )( ::std::string ) ;
typedef bool ( Predictor_wrapper::*default_Load__function_type )( ::std::string ) ;

Predictor_exposer.def(
"Load_"
, Load__function_type(&::gezi::Predictor::Load_)
, default_Load__function_type(&Predictor_wrapper::default_Load_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::Margin

typedef ::Float ( Predictor_wrapper::*Margin_function_type )( ::gezi::Vector & ) ;

Predictor_exposer.def(
"Margin"
, Margin_function_type( &Predictor_wrapper::Margin )
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::Name

typedef ::std::string ( ::gezi::Predictor::*Name_function_type )(  ) ;
typedef ::std::string ( Predictor_wrapper::*default_Name_function_type )(  ) ;

Predictor_exposer.def(
"Name"
, Name_function_type(&::gezi::Predictor::Name)
, default_Name_function_type(&Predictor_wrapper::default_Name) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Instance & ) ;

Predictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::InstancePtr ) ;
typedef ::Float ( Predictor_wrapper::*default_Output_function_type )( ::gezi::InstancePtr ) ;

Predictor_exposer.def(
"Output"
, Output_function_type(&::gezi::Predictor::Output)
, default_Output_function_type(&Predictor_wrapper::default_Output)
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Vector & ) ;

Predictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::Fvec & ) ;

Predictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("values") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::ivec &,::Fvec & ) ;

Predictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("indices"), bp::arg("values") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::std::string ) ;
typedef ::Float ( Predictor_wrapper::*default_Output_function_type )( ::std::string ) ;

Predictor_exposer.def(
"Output"
, Output_function_type(&::gezi::Predictor::Output)
, default_Output_function_type(&Predictor_wrapper::default_Output)
, ( bp::arg("line") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::std::map< int, double > const & ) ;

Predictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("m") ) );

}
{ //::gezi::Predictor::Path

typedef ::std::string ( ::gezi::Predictor::*Path_function_type )(  ) ;

Predictor_exposer.def(
"Path"
, Path_function_type( &::gezi::Predictor::Path ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("values") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::string,::Float & ) ;
typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::std::string,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&Predictor_wrapper::default_Predict)
, ( bp::arg("line"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr ) ;
typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&Predictor_wrapper::default_Predict)
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector & ) ;
typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::Vector & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&Predictor_wrapper::default_Predict)
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance &,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("instance"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;
typedef ::Float ( Predictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&Predictor_wrapper::default_Predict)
, ( bp::arg("instance"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector &,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("features"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec &,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("values"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec &,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("m") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const &,::Float & ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("m"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Float ) ;

Predictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("output") ) );

}
{ //::gezi::Predictor::ReadPathAndSetParam_

typedef void ( ::gezi::Predictor::*ReadPathAndSetParam__function_type )( ::std::string ) ;

Predictor_exposer.def(
"ReadPathAndSetParam_"
, ReadPathAndSetParam__function_type( &::gezi::Predictor::ReadPathAndSetParam_ )
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::Save

typedef void ( ::gezi::Predictor::*Save_function_type )(  ) ;
typedef void ( Predictor_wrapper::*default_Save_function_type )(  ) ;

Predictor_exposer.def(
"Save"
, Save_function_type(&::gezi::Predictor::Save)
, default_Save_function_type(&Predictor_wrapper::default_Save) );

}
{ //::gezi::Predictor::Save

typedef void ( ::gezi::Predictor::*Save_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_Save_function_type )( ::std::string ) ;

Predictor_exposer.def(
"Save"
, Save_function_type(&::gezi::Predictor::Save)
, default_Save_function_type(&Predictor_wrapper::default_Save)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::SaveBin

typedef void ( ::gezi::Predictor::*SaveBin_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveBin_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveBin"
, SaveBin_function_type(&::gezi::Predictor::SaveBin)
, default_SaveBin_function_type(&Predictor_wrapper::default_SaveBin)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::SaveCode

typedef void ( ::gezi::Predictor::*SaveCode_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveCode_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveCode"
, SaveCode_function_type(&::gezi::Predictor::SaveCode)
, default_SaveCode_function_type(&Predictor_wrapper::default_SaveCode)
, ( bp::arg("codeTypeStr")="cpp" ) );

}
{ //::gezi::Predictor::SaveCode_

typedef void ( ::gezi::Predictor::*SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;
typedef void ( Predictor_wrapper::*default_SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;

Predictor_exposer.def(
"SaveCode_"
, SaveCode__function_type(&::gezi::Predictor::SaveCode_)
, default_SaveCode__function_type(&Predictor_wrapper::default_SaveCode_)
, ( bp::arg("file"), bp::arg("codeType") ) );

}
{ //::gezi::Predictor::SaveFeaturesGain

typedef void ( ::gezi::Predictor::*SaveFeaturesGain_function_type )( int ) ;
typedef void ( Predictor_wrapper::*default_SaveFeaturesGain_function_type )( int ) ;

Predictor_exposer.def(
"SaveFeaturesGain"
, SaveFeaturesGain_function_type(&::gezi::Predictor::SaveFeaturesGain)
, default_SaveFeaturesGain_function_type(&Predictor_wrapper::default_SaveFeaturesGain)
, ( bp::arg("topNum")=(int)(0) ) );

}
{ //::gezi::Predictor::SaveJson

typedef void ( ::gezi::Predictor::*SaveJson_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveJson_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveJson"
, SaveJson_function_type(&::gezi::Predictor::SaveJson)
, default_SaveJson_function_type(&Predictor_wrapper::default_SaveJson)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveJson

typedef void ( ::gezi::Predictor::*SaveJson_function_type )(  ) ;

Predictor_exposer.def(
"SaveJson"
, SaveJson_function_type( &::gezi::Predictor::SaveJson ) );

}
{ //::gezi::Predictor::SaveJson_

typedef void ( ::gezi::Predictor::*SaveJson__function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveJson__function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveJson_"
, SaveJson__function_type(&::gezi::Predictor::SaveJson_)
, default_SaveJson__function_type(&Predictor_wrapper::default_SaveJson_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveText

typedef void ( ::gezi::Predictor::*SaveText_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveText_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveText"
, SaveText_function_type(&::gezi::Predictor::SaveText)
, default_SaveText_function_type(&Predictor_wrapper::default_SaveText)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveText

typedef void ( ::gezi::Predictor::*SaveText_function_type )(  ) ;

Predictor_exposer.def(
"SaveText"
, SaveText_function_type( &::gezi::Predictor::SaveText ) );

}
{ //::gezi::Predictor::SaveText_

typedef void ( ::gezi::Predictor::*SaveText__function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveText__function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveText_"
, SaveText__function_type(&::gezi::Predictor::SaveText_)
, default_SaveText__function_type(&Predictor_wrapper::default_SaveText_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveXml

typedef void ( ::gezi::Predictor::*SaveXml_function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveXml_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveXml"
, SaveXml_function_type(&::gezi::Predictor::SaveXml)
, default_SaveXml_function_type(&Predictor_wrapper::default_SaveXml)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveXml

typedef void ( ::gezi::Predictor::*SaveXml_function_type )(  ) ;

Predictor_exposer.def(
"SaveXml"
, SaveXml_function_type( &::gezi::Predictor::SaveXml ) );

}
{ //::gezi::Predictor::SaveXml_

typedef void ( ::gezi::Predictor::*SaveXml__function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_SaveXml__function_type )( ::std::string ) ;

Predictor_exposer.def(
"SaveXml_"
, SaveXml__function_type(&::gezi::Predictor::SaveXml_)
, default_SaveXml__function_type(&Predictor_wrapper::default_SaveXml_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::Save_

typedef void ( ::gezi::Predictor::*Save__function_type )( ::std::string ) ;
typedef void ( Predictor_wrapper::*default_Save__function_type )( ::std::string ) ;

Predictor_exposer.def(
"Save_"
, Save__function_type(&::gezi::Predictor::Save_)
, default_Save__function_type(&Predictor_wrapper::default_Save_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SetCalibrator

typedef void ( ::gezi::Predictor::*SetCalibrator_function_type )( ::gezi::CalibratorPtr ) ;

Predictor_exposer.def(
"SetCalibrator"
, SetCalibrator_function_type( &::gezi::Predictor::SetCalibrator )
, ( bp::arg("calibrator") ) );

}
{ //::gezi::Predictor::SetFeatureGainVec

typedef void ( ::gezi::Predictor::*SetFeatureGainVec_function_type )( ::std::vector< double > const & ) ;

Predictor_exposer.def(
"SetFeatureGainVec"
, SetFeatureGainVec_function_type( &::gezi::Predictor::SetFeatureGainVec )
, ( bp::arg("featureGainVec") ) );

}
{ //::gezi::Predictor::SetFeatureNames

typedef void ( ::gezi::Predictor::*SetFeatureNames_function_type )( ::gezi::FeatureNamesVector const & ) ;

Predictor_exposer.def(
"SetFeatureNames"
, SetFeatureNames_function_type( &::gezi::Predictor::SetFeatureNames )
, ( bp::arg("featureNames") ) );

}
{ //::gezi::Predictor::SetLoadNormalizerAndCalibrator

typedef void ( *SetLoadNormalizerAndCalibrator_function_type )( bool );

Predictor_exposer.def(
"SetLoadNormalizerAndCalibrator"
, SetLoadNormalizerAndCalibrator_function_type( &::gezi::Predictor::SetLoadNormalizerAndCalibrator )
, ( bp::arg("loadNormalizerAndCalibrator_")=(bool)(true) ) );

}
{ //::gezi::Predictor::SetNormalizeCopy

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetNormalizeCopy_function_type )( bool ) ;

Predictor_exposer.def(
"SetNormalizeCopy"
, SetNormalizeCopy_function_type( &::gezi::Predictor::SetNormalizeCopy )
, ( bp::arg("normalizeCopy")=(bool)(true) )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::SetNormalizer

typedef void ( ::gezi::Predictor::*SetNormalizer_function_type )( ::gezi::NormalizerPtr ) ;

Predictor_exposer.def(
"SetNormalizer"
, SetNormalizer_function_type( &::gezi::Predictor::SetNormalizer )
, ( bp::arg("normalizer") ) );

}
{ //::gezi::Predictor::SetParam

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetParam_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SetParam"
, SetParam_function_type( &::gezi::Predictor::SetParam )
, ( bp::arg("param") )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::SetPath

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetPath_function_type )( ::std::string ) ;

Predictor_exposer.def(
"SetPath"
, SetPath_function_type( &::gezi::Predictor::SetPath )
, ( bp::arg("path") )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::SetSaveCalibratorText

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetSaveCalibratorText_function_type )( bool ) ;

Predictor_exposer.def(
"SetSaveCalibratorText"
, SetSaveCalibratorText_function_type( &::gezi::Predictor::SetSaveCalibratorText )
, ( bp::arg("setSave")=(bool)(true) )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::SetSaveNormalizerText

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetSaveNormalizerText_function_type )( bool ) ;

Predictor_exposer.def(
"SetSaveNormalizerText"
, SetSaveNormalizerText_function_type( &::gezi::Predictor::SetSaveNormalizerText )
, ( bp::arg("setSave")=(bool)(true) )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::SetUseCustomModel

typedef ::gezi::Predictor & ( ::gezi::Predictor::*SetUseCustomModel_function_type )( bool ) ;

Predictor_exposer.def(
"SetUseCustomModel"
, SetUseCustomModel_function_type( &::gezi::Predictor::SetUseCustomModel )
, ( bp::arg("useCustomModel") )
, bp::return_internal_reference<>());

}
{ //::gezi::Predictor::ThirdModelName

typedef ::std::string ( *ThirdModelName_function_type )( ::std::string );

Predictor_exposer.def(
"ThirdModelName"
, ThirdModelName_function_type( &::gezi::Predictor::ThirdModelName )
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::ToFeaturesGainSummary

typedef ::std::string ( ::gezi::Predictor::*ToFeaturesGainSummary_function_type )( int ) ;
typedef ::std::string ( Predictor_wrapper::*default_ToFeaturesGainSummary_function_type )( int ) ;

Predictor_exposer.def(
"ToFeaturesGainSummary"
, ToFeaturesGainSummary_function_type(&::gezi::Predictor::ToFeaturesGainSummary)
, default_ToFeaturesGainSummary_function_type(&Predictor_wrapper::default_ToFeaturesGainSummary)
, ( bp::arg("topNum")=(int)(0) ) );

}
{ //::gezi::Predictor::ToGainSummary

typedef ::std::string ( ::gezi::Predictor::*ToGainSummary_function_type )( ::gezi::Vector & ) ;
typedef ::std::string ( Predictor_wrapper::*default_ToGainSummary_function_type )( ::gezi::Vector & ) ;

Predictor_exposer.def(
"ToGainSummary"
, ToGainSummary_function_type(&::gezi::Predictor::ToGainSummary)
, default_ToGainSummary_function_type(&Predictor_wrapper::default_ToGainSummary)
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::ToNamedFeatures

typedef ::std::map< std::string, double > ( ::gezi::Predictor::*ToNamedFeatures_function_type )( ::gezi::Vector const & ) ;

Predictor_exposer.def(
"ToNamedFeatures"
, ToNamedFeatures_function_type( &::gezi::Predictor::ToNamedFeatures )
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::UseCustomModel

typedef bool ( ::gezi::Predictor::*UseCustomModel_function_type )(  ) const;

Predictor_exposer.def(
"UseCustomModel"
, UseCustomModel_function_type( &::gezi::Predictor::UseCustomModel ) );

}
Predictor_exposer.staticmethod( "SetLoadNormalizerAndCalibrator" );
Predictor_exposer.staticmethod( "ThirdModelName" );
}

{ //::gezi::GbdtPredictor
typedef bp::class_< GbdtPredictor_wrapper, bp::bases< gezi::Predictor > > GbdtPredictor_exposer_t;
GbdtPredictor_exposer_t GbdtPredictor_exposer = GbdtPredictor_exposer_t( "GbdtPredictor", bp::init< >() );
bp::scope GbdtPredictor_scope( GbdtPredictor_exposer );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > &, gezi::CalibratorPtr, gezi::FeatureNamesVector const & >(( bp::arg("trees"), bp::arg("calibrator"), bp::arg("featureNames") )) );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > &, gezi::FeatureNamesVector const & >(( bp::arg("trees"), bp::arg("featureNames") )) );
GbdtPredictor_exposer.def( bp::init< std::vector< gezi::OnlineRegressionTree > & >(( bp::arg("trees") )) );
bp::implicitly_convertible< std::vector< gezi::OnlineRegressionTree > &, gezi::GbdtPredictor >();
GbdtPredictor_exposer.def( bp::init< std::string >(( bp::arg("modelPath") )) );
bp::implicitly_convertible< std::string, gezi::GbdtPredictor >();
{ //::gezi::GbdtPredictor::CustomLoad_

typedef bool ( ::gezi::GbdtPredictor::*CustomLoad__function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_CustomLoad__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomLoad_"
, CustomLoad__function_type(&::gezi::GbdtPredictor::CustomLoad_)
, default_CustomLoad__function_type(&GbdtPredictor_wrapper::default_CustomLoad_)
, ( bp::arg("path") ) );

}
{ //::gezi::GbdtPredictor::CustomSave_

typedef void ( ::gezi::GbdtPredictor::*CustomSave__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_CustomSave__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomSave_"
, CustomSave__function_type(&::gezi::GbdtPredictor::CustomSave_)
, default_CustomSave__function_type(&GbdtPredictor_wrapper::default_CustomSave_)
, ( bp::arg("path") ) );

}
{ //::gezi::GbdtPredictor::FeatureGainPrint

typedef void ( ::gezi::GbdtPredictor::*FeatureGainPrint_function_type )( ::gezi::Vector &,int ) ;

GbdtPredictor_exposer.def(
"FeatureGainPrint"
, FeatureGainPrint_function_type( &::gezi::GbdtPredictor::FeatureGainPrint )
, ( bp::arg("features"), bp::arg("level")=(int)(0) ) );

}
{ //::gezi::GbdtPredictor::GainMap

typedef ::std::map< int, double > ( ::gezi::GbdtPredictor::*GainMap_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"GainMap"
, GainMap_function_type( &::gezi::GbdtPredictor::GainMap )
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::LoadText

typedef bool ( ::gezi::GbdtPredictor::*LoadText_function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_LoadText_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"LoadText"
, LoadText_function_type(&::gezi::GbdtPredictor::LoadText)
, default_LoadText_function_type(&GbdtPredictor_wrapper::default_LoadText)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Load_

typedef bool ( ::gezi::GbdtPredictor::*Load__function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_Load__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Load_"
, Load__function_type(&::gezi::GbdtPredictor::Load_)
, default_Load__function_type(&GbdtPredictor_wrapper::default_Load_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Margin

typedef ::Float ( GbdtPredictor_wrapper::*Margin_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"Margin"
, Margin_function_type( &GbdtPredictor_wrapper::Margin )
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::Name

typedef ::std::string ( ::gezi::GbdtPredictor::*Name_function_type )(  ) ;
typedef ::std::string ( GbdtPredictor_wrapper::*default_Name_function_type )(  ) ;

GbdtPredictor_exposer.def(
"Name"
, Name_function_type(&::gezi::GbdtPredictor::Name)
, default_Name_function_type(&GbdtPredictor_wrapper::default_Name) );

}
{ //::gezi::GbdtPredictor::SaveCode_

typedef void ( ::gezi::GbdtPredictor::*SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveCode__function_type )( ::std::string,::gezi::CodeType ) ;

GbdtPredictor_exposer.def(
"SaveCode_"
, SaveCode__function_type(&::gezi::GbdtPredictor::SaveCode_)
, default_SaveCode__function_type(&GbdtPredictor_wrapper::default_SaveCode_)
, ( bp::arg("file"), bp::arg("codeType") ) );

}
{ //::gezi::GbdtPredictor::SaveJson_

typedef void ( ::gezi::GbdtPredictor::*SaveJson__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveJson__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveJson_"
, SaveJson__function_type(&::gezi::GbdtPredictor::SaveJson_)
, default_SaveJson__function_type(&GbdtPredictor_wrapper::default_SaveJson_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::SaveXml_

typedef void ( ::gezi::GbdtPredictor::*SaveXml__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveXml__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveXml_"
, SaveXml__function_type(&::gezi::GbdtPredictor::SaveXml_)
, default_SaveXml__function_type(&GbdtPredictor_wrapper::default_SaveXml_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::Save_

typedef void ( ::gezi::GbdtPredictor::*Save__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_Save__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Save_"
, Save__function_type(&::gezi::GbdtPredictor::Save_)
, default_Save__function_type(&GbdtPredictor_wrapper::default_Save_)
, ( bp::arg("file") ) );

}
{ //::gezi::GbdtPredictor::ToGainSummary

typedef ::std::string ( ::gezi::GbdtPredictor::*ToGainSummary_function_type )( ::gezi::Vector & ) ;
typedef ::std::string ( GbdtPredictor_wrapper::*default_ToGainSummary_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"ToGainSummary"
, ToGainSummary_function_type(&::gezi::GbdtPredictor::ToGainSummary)
, default_ToGainSummary_function_type(&GbdtPredictor_wrapper::default_ToGainSummary)
, ( bp::arg("features") ) );

}
{ //::gezi::GbdtPredictor::Trees

typedef ::std::vector< gezi::OnlineRegressionTree > & ( GbdtPredictor_wrapper::*Trees_function_type )(  ) ;

GbdtPredictor_exposer.def(
"Trees"
, Trees_function_type( &GbdtPredictor_wrapper::Trees )
, bp::return_internal_reference<>());

}
{ //::gezi::GbdtPredictor::Trees

typedef ::std::vector< gezi::OnlineRegressionTree > const & ( GbdtPredictor_wrapper::*Trees_function_type )(  ) const;

GbdtPredictor_exposer.def(
"Trees"
, Trees_function_type( &GbdtPredictor_wrapper::Trees )
, bp::return_value_policy< bp::copy_const_reference >() );

}
GbdtPredictor_exposer.def_readwrite( "_textModelPath", &gezi::GbdtPredictor::_textModelPath );
GbdtPredictor_exposer.def_readwrite( "_trees", &gezi::GbdtPredictor::_trees );
{ //::gezi::Predictor::CustomLoad

typedef bool ( ::gezi::Predictor::*CustomLoad_function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_CustomLoad_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomLoad"
, CustomLoad_function_type(&::gezi::Predictor::CustomLoad)
, default_CustomLoad_function_type(&GbdtPredictor_wrapper::default_CustomLoad)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::CustomSave

typedef void ( ::gezi::Predictor::*CustomSave_function_type )(  ) ;
typedef void ( GbdtPredictor_wrapper::*default_CustomSave_function_type )(  ) ;

GbdtPredictor_exposer.def(
"CustomSave"
, CustomSave_function_type(&::gezi::Predictor::CustomSave)
, default_CustomSave_function_type(&GbdtPredictor_wrapper::default_CustomSave) );

}
{ //::gezi::Predictor::CustomSave

typedef void ( ::gezi::Predictor::*CustomSave_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_CustomSave_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"CustomSave"
, CustomSave_function_type(&::gezi::Predictor::CustomSave)
, default_CustomSave_function_type(&GbdtPredictor_wrapper::default_CustomSave)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::GetPredictionKind

typedef ::gezi::PredictionKind ( ::gezi::Predictor::*GetPredictionKind_function_type )(  ) ;
typedef ::gezi::PredictionKind ( GbdtPredictor_wrapper::*default_GetPredictionKind_function_type )(  ) ;

GbdtPredictor_exposer.def(
"GetPredictionKind"
, GetPredictionKind_function_type(&::gezi::Predictor::GetPredictionKind)
, default_GetPredictionKind_function_type(&GbdtPredictor_wrapper::default_GetPredictionKind) );

}
{ //::gezi::Predictor::Load

typedef bool ( ::gezi::Predictor::*Load_function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_Load_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Load"
, Load_function_type(&::gezi::Predictor::Load)
, default_Load_function_type(&GbdtPredictor_wrapper::default_Load)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadBin

typedef bool ( ::gezi::Predictor::*LoadBin_function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_LoadBin_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"LoadBin"
, LoadBin_function_type(&::gezi::Predictor::LoadBin)
, default_LoadBin_function_type(&GbdtPredictor_wrapper::default_LoadBin)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::LoadText_

typedef bool ( ::gezi::Predictor::*LoadText__function_type )( ::std::string ) ;
typedef bool ( GbdtPredictor_wrapper::*default_LoadText__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"LoadText_"
, LoadText__function_type(&::gezi::Predictor::LoadText_)
, default_LoadText__function_type(&GbdtPredictor_wrapper::default_LoadText_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Instance & ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::InstancePtr ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Output_function_type )( ::gezi::InstancePtr ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type(&::gezi::Predictor::Output)
, default_Output_function_type(&GbdtPredictor_wrapper::default_Output)
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::Fvec & ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("values") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::ivec &,::Fvec & ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("indices"), bp::arg("values") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::std::string ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Output_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type(&::gezi::Predictor::Output)
, default_Output_function_type(&GbdtPredictor_wrapper::default_Output)
, ( bp::arg("line") ) );

}
{ //::gezi::Predictor::Output

typedef ::Float ( ::gezi::Predictor::*Output_function_type )( ::std::map< int, double > const & ) ;

GbdtPredictor_exposer.def(
"Output"
, Output_function_type( &::gezi::Predictor::Output )
, ( bp::arg("m") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("values") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::string,::Float & ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Predict_function_type )( ::std::string,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&GbdtPredictor_wrapper::default_Predict)
, ( bp::arg("line"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&GbdtPredictor_wrapper::default_Predict)
, ( bp::arg("instance") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector & ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Predict_function_type )( ::gezi::Vector & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&GbdtPredictor_wrapper::default_Predict)
, ( bp::arg("features") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Instance &,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("instance"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;
typedef ::Float ( GbdtPredictor_wrapper::*default_Predict_function_type )( ::gezi::InstancePtr,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type(&::gezi::Predictor::Predict)
, default_Predict_function_type(&GbdtPredictor_wrapper::default_Predict)
, ( bp::arg("instance"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::gezi::Vector &,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("features"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Fvec &,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("values"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::ivec &,::Fvec &,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("m") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::std::map< int, double > const &,::Float & ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("m"), bp::arg("output") ) );

}
{ //::gezi::Predictor::Predict

typedef ::Float ( ::gezi::Predictor::*Predict_function_type )( ::Float ) ;

GbdtPredictor_exposer.def(
"Predict"
, Predict_function_type( &::gezi::Predictor::Predict )
, ( bp::arg("output") ) );

}
{ //::gezi::Predictor::Save

typedef void ( ::gezi::Predictor::*Save_function_type )(  ) ;
typedef void ( GbdtPredictor_wrapper::*default_Save_function_type )(  ) ;

GbdtPredictor_exposer.def(
"Save"
, Save_function_type(&::gezi::Predictor::Save)
, default_Save_function_type(&GbdtPredictor_wrapper::default_Save) );

}
{ //::gezi::Predictor::Save

typedef void ( ::gezi::Predictor::*Save_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_Save_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"Save"
, Save_function_type(&::gezi::Predictor::Save)
, default_Save_function_type(&GbdtPredictor_wrapper::default_Save)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::SaveBin

typedef void ( ::gezi::Predictor::*SaveBin_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveBin_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveBin"
, SaveBin_function_type(&::gezi::Predictor::SaveBin)
, default_SaveBin_function_type(&GbdtPredictor_wrapper::default_SaveBin)
, ( bp::arg("path") ) );

}
{ //::gezi::Predictor::SaveCode

typedef void ( ::gezi::Predictor::*SaveCode_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveCode_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveCode"
, SaveCode_function_type(&::gezi::Predictor::SaveCode)
, default_SaveCode_function_type(&GbdtPredictor_wrapper::default_SaveCode)
, ( bp::arg("codeTypeStr")="cpp" ) );

}
{ //::gezi::Predictor::SaveFeaturesGain

typedef void ( ::gezi::Predictor::*SaveFeaturesGain_function_type )( int ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveFeaturesGain_function_type )( int ) ;

GbdtPredictor_exposer.def(
"SaveFeaturesGain"
, SaveFeaturesGain_function_type(&::gezi::Predictor::SaveFeaturesGain)
, default_SaveFeaturesGain_function_type(&GbdtPredictor_wrapper::default_SaveFeaturesGain)
, ( bp::arg("topNum")=(int)(0) ) );

}
{ //::gezi::Predictor::SaveJson

typedef void ( ::gezi::Predictor::*SaveJson_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveJson_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveJson"
, SaveJson_function_type(&::gezi::Predictor::SaveJson)
, default_SaveJson_function_type(&GbdtPredictor_wrapper::default_SaveJson)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveJson

typedef void ( ::gezi::Predictor::*SaveJson_function_type )(  ) ;

GbdtPredictor_exposer.def(
"SaveJson"
, SaveJson_function_type( &::gezi::Predictor::SaveJson ) );

}
{ //::gezi::Predictor::SaveText

typedef void ( ::gezi::Predictor::*SaveText_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveText_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveText"
, SaveText_function_type(&::gezi::Predictor::SaveText)
, default_SaveText_function_type(&GbdtPredictor_wrapper::default_SaveText)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveText

typedef void ( ::gezi::Predictor::*SaveText_function_type )(  ) ;

GbdtPredictor_exposer.def(
"SaveText"
, SaveText_function_type( &::gezi::Predictor::SaveText ) );

}
{ //::gezi::Predictor::SaveText_

typedef void ( ::gezi::Predictor::*SaveText__function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveText__function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveText_"
, SaveText__function_type(&::gezi::Predictor::SaveText_)
, default_SaveText__function_type(&GbdtPredictor_wrapper::default_SaveText_)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveXml

typedef void ( ::gezi::Predictor::*SaveXml_function_type )( ::std::string ) ;
typedef void ( GbdtPredictor_wrapper::*default_SaveXml_function_type )( ::std::string ) ;

GbdtPredictor_exposer.def(
"SaveXml"
, SaveXml_function_type(&::gezi::Predictor::SaveXml)
, default_SaveXml_function_type(&GbdtPredictor_wrapper::default_SaveXml)
, ( bp::arg("file") ) );

}
{ //::gezi::Predictor::SaveXml

typedef void ( ::gezi::Predictor::*SaveXml_function_type )(  ) ;

GbdtPredictor_exposer.def(
"SaveXml"
, SaveXml_function_type( &::gezi::Predictor::SaveXml ) );

}
{ //::gezi::Predictor::ToFeaturesGainSummary

typedef ::std::string ( ::gezi::Predictor::*ToFeaturesGainSummary_function_type )( int ) ;
typedef ::std::string ( GbdtPredictor_wrapper::*default_ToFeaturesGainSummary_function_type )( int ) ;

GbdtPredictor_exposer.def(
"ToFeaturesGainSummary"
, ToFeaturesGainSummary_function_type(&::gezi::Predictor::ToFeaturesGainSummary)
, default_ToFeaturesGainSummary_function_type(&GbdtPredictor_wrapper::default_ToFeaturesGainSummary)
, ( bp::arg("topNum")=(int)(0) ) );

}
}

bp::class_< GbdtRegressionPredictor_wrapper, bp::bases< gezi::GbdtPredictor > >( "GbdtRegressionPredictor" )
.def(
"GetPredictionKind"
, (::gezi::PredictionKind ( ::gezi::GbdtRegressionPredictor::* )(  ) )(&::gezi::GbdtRegressionPredictor::GetPredictionKind)
, (::gezi::PredictionKind ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_GetPredictionKind) )
.def(
"Name"
, (::std::string ( ::gezi::GbdtRegressionPredictor::* )(  ) )(&::gezi::GbdtRegressionPredictor::Name)
, (::std::string ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_Name) )
.def(
"CustomLoad"
, (bool ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::CustomLoad)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomLoad)
, ( bp::arg("path") ) )
.def(
"CustomLoad_"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::CustomLoad_)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomLoad_)
, ( bp::arg("path") ) )
.def(
"CustomSave"
, (void ( ::gezi::Predictor::* )(  ) )(&::gezi::Predictor::CustomSave)
, (void ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_CustomSave) )
.def(
"CustomSave"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::CustomSave)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomSave)
, ( bp::arg("path") ) )
.def(
"CustomSave_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::CustomSave_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_CustomSave_)
, ( bp::arg("path") ) )
.def(
"Load"
, (bool ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::Load)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Load)
, ( bp::arg("path") ) )
.def(
"LoadBin"
, (bool ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::LoadBin)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_LoadBin)
, ( bp::arg("path") ) )
.def(
"LoadText"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::LoadText)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_LoadText)
, ( bp::arg("file") ) )
.def(
"LoadText_"
, (bool ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::LoadText_)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_LoadText_)
, ( bp::arg("file") ) )
.def(
"Load_"
, (bool ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::Load_)
, (bool ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Load_)
, ( bp::arg("file") ) )
.def(
"Margin"
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::Vector & ) )(&GbdtRegressionPredictor_wrapper::Margin)
, ( bp::arg("features") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Instance & ) )( &::gezi::Predictor::Output )
, ( bp::arg("instance") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::gezi::InstancePtr ) )(&::gezi::Predictor::Output)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::InstancePtr ) )(&GbdtRegressionPredictor_wrapper::default_Output)
, ( bp::arg("instance") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Vector & ) )( &::gezi::Predictor::Output )
, ( bp::arg("features") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::Fvec & ) )( &::gezi::Predictor::Output )
, ( bp::arg("values") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::ivec &,::Fvec & ) )( &::gezi::Predictor::Output )
, ( bp::arg("indices"), bp::arg("values") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::Output)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Output)
, ( bp::arg("line") ) )
.def(
"Output"
, (::Float ( ::gezi::Predictor::* )( ::std::map< int, double > const & ) )( &::gezi::Predictor::Output )
, ( bp::arg("m") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Instance & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("instance") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::Fvec & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("values") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::ivec &,::Fvec & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::std::string,::Float & ) )(&::gezi::Predictor::Predict)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::std::string,::Float & ) )(&GbdtRegressionPredictor_wrapper::default_Predict)
, ( bp::arg("line"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::InstancePtr ) )(&::gezi::Predictor::Predict)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::InstancePtr ) )(&GbdtRegressionPredictor_wrapper::default_Predict)
, ( bp::arg("instance") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Vector & ) )(&::gezi::Predictor::Predict)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::Vector & ) )(&GbdtRegressionPredictor_wrapper::default_Predict)
, ( bp::arg("features") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Instance &,::Float & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("instance"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::InstancePtr,::Float & ) )(&::gezi::Predictor::Predict)
, (::Float ( GbdtRegressionPredictor_wrapper::* )( ::gezi::InstancePtr,::Float & ) )(&GbdtRegressionPredictor_wrapper::default_Predict)
, ( bp::arg("instance"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::gezi::Vector &,::Float & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("features"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::Fvec &,::Float & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("values"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::ivec &,::Fvec &,::Float & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("indices"), bp::arg("values"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::std::map< int, double > const & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("m") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::std::map< int, double > const &,::Float & ) )( &::gezi::Predictor::Predict )
, ( bp::arg("m"), bp::arg("output") ) )
.def(
"Predict"
, (::Float ( ::gezi::Predictor::* )( ::Float ) )( &::gezi::Predictor::Predict )
, ( bp::arg("output") ) )
.def(
"Save"
, (void ( ::gezi::Predictor::* )(  ) )(&::gezi::Predictor::Save)
, (void ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::default_Save) )
.def(
"Save"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::Save)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Save)
, ( bp::arg("path") ) )
.def(
"SaveBin"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveBin)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveBin)
, ( bp::arg("path") ) )
.def(
"SaveCode"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveCode)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveCode)
, ( bp::arg("codeTypeStr")="cpp" ) )
.def(
"SaveCode_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string,::gezi::CodeType ) )(&::gezi::GbdtPredictor::SaveCode_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string,::gezi::CodeType ) )(&GbdtRegressionPredictor_wrapper::default_SaveCode_)
, ( bp::arg("file"), bp::arg("codeType") ) )
.def(
"SaveFeaturesGain"
, (void ( ::gezi::Predictor::* )( int ) )(&::gezi::Predictor::SaveFeaturesGain)
, (void ( GbdtRegressionPredictor_wrapper::* )( int ) )(&GbdtRegressionPredictor_wrapper::default_SaveFeaturesGain)
, ( bp::arg("topNum")=(int)(0) ) )
.def(
"SaveJson"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveJson)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveJson)
, ( bp::arg("file") ) )
.def(
"SaveJson"
, (void ( ::gezi::Predictor::* )(  ) )( &::gezi::Predictor::SaveJson ) )
.def(
"SaveJson_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::SaveJson_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveJson_)
, ( bp::arg("file") ) )
.def(
"SaveText"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveText)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveText)
, ( bp::arg("file") ) )
.def(
"SaveText"
, (void ( ::gezi::Predictor::* )(  ) )( &::gezi::Predictor::SaveText ) )
.def(
"SaveText_"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveText_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveText_)
, ( bp::arg("file") ) )
.def(
"SaveXml"
, (void ( ::gezi::Predictor::* )( ::std::string ) )(&::gezi::Predictor::SaveXml)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveXml)
, ( bp::arg("file") ) )
.def(
"SaveXml"
, (void ( ::gezi::Predictor::* )(  ) )( &::gezi::Predictor::SaveXml ) )
.def(
"SaveXml_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::SaveXml_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_SaveXml_)
, ( bp::arg("file") ) )
.def(
"Save_"
, (void ( ::gezi::GbdtPredictor::* )( ::std::string ) )(&::gezi::GbdtPredictor::Save_)
, (void ( GbdtRegressionPredictor_wrapper::* )( ::std::string ) )(&GbdtRegressionPredictor_wrapper::default_Save_)
, ( bp::arg("file") ) )
.def(
"ToFeaturesGainSummary"
, (::std::string ( ::gezi::Predictor::* )( int ) )(&::gezi::Predictor::ToFeaturesGainSummary)
, (::std::string ( GbdtRegressionPredictor_wrapper::* )( int ) )(&GbdtRegressionPredictor_wrapper::default_ToFeaturesGainSummary)
, ( bp::arg("topNum")=(int)(0) ) )
.def(
"ToGainSummary"
, (::std::string ( ::gezi::GbdtPredictor::* )( ::gezi::Vector & ) )(&::gezi::GbdtPredictor::ToGainSummary)
, (::std::string ( GbdtRegressionPredictor_wrapper::* )( ::gezi::Vector & ) )(&GbdtRegressionPredictor_wrapper::default_ToGainSummary)
, ( bp::arg("features") ) )
.def(
"Trees"
, (::std::vector<gezi::OnlineRegressionTree, std::allocator<gezi::OnlineRegressionTree> > & ( GbdtRegressionPredictor_wrapper::* )(  ) )(&GbdtRegressionPredictor_wrapper::Trees)
, bp::return_internal_reference<>())
.def(
"Trees"
, (::std::vector<gezi::OnlineRegressionTree, std::allocator<gezi::OnlineRegressionTree> > const & ( GbdtRegressionPredictor_wrapper::* )(  ) const)(&GbdtRegressionPredictor_wrapper::Trees)
, bp::return_value_policy< bp::copy_const_reference >() );

{ //::gezi::OnlineRegressionTree
typedef bp::class_< OnlineRegressionTree_wrapper > OnlineRegressionTree_exposer_t;
OnlineRegressionTree_exposer_t OnlineRegressionTree_exposer = OnlineRegressionTree_exposer_t( "OnlineRegressionTree", bp::init< >() );
bp::scope OnlineRegressionTree_scope( OnlineRegressionTree_exposer );
OnlineRegressionTree_exposer.def( bp::init< gezi::OnlineRegressionTree const & >(( bp::arg("arg0") )) );
{ //::gezi::OnlineRegressionTree::FeatureNames

typedef ::gezi::FeatureNamesVector & ( ::gezi::OnlineRegressionTree::*FeatureNames_function_type )(  ) ;

OnlineRegressionTree_exposer.def(
"FeatureNames"
, FeatureNames_function_type( &::gezi::OnlineRegressionTree::FeatureNames )
, bp::return_internal_reference<>());

}
{ //::gezi::OnlineRegressionTree::FeatureNames

typedef ::gezi::FeatureNamesVector const & ( ::gezi::OnlineRegressionTree::*FeatureNames_function_type )(  ) const;

OnlineRegressionTree_exposer.def(
"FeatureNames"
, FeatureNames_function_type( &::gezi::OnlineRegressionTree::FeatureNames )
, bp::return_value_policy< bp::copy_const_reference >() );

}
{ //::gezi::OnlineRegressionTree::GainMap

typedef void ( ::gezi::OnlineRegressionTree::*GainMap_function_type )( ::gezi::Vector &,::std::map< int, double > & ) ;

OnlineRegressionTree_exposer.def(
"GainMap"
, GainMap_function_type( &::gezi::OnlineRegressionTree::GainMap )
, ( bp::arg("features"), bp::arg("m") ) );

}
{ //::gezi::OnlineRegressionTree::GetLeaf

typedef int ( ::gezi::OnlineRegressionTree::*GetLeaf_function_type )( ::gezi::Vector const & ) ;

OnlineRegressionTree_exposer.def(
"GetLeaf"
, GetLeaf_function_type( &::gezi::OnlineRegressionTree::GetLeaf )
, ( bp::arg("features") ) );

}
{ //::gezi::OnlineRegressionTree::Output

typedef ::Float ( ::gezi::OnlineRegressionTree::*Output_function_type )( ::gezi::Vector & ) ;

OnlineRegressionTree_exposer.def(
"Output"
, Output_function_type( &::gezi::OnlineRegressionTree::Output )
, ( bp::arg("features") ) );

}
{ //::gezi::OnlineRegressionTree::Print

typedef void ( ::gezi::OnlineRegressionTree::*Print_function_type )( int,int ) ;

OnlineRegressionTree_exposer.def(
"Print"
, Print_function_type( &::gezi::OnlineRegressionTree::Print )
, ( bp::arg("node")=(int)(0), bp::arg("depth")=(int)(0) ) );

}
{ //::gezi::OnlineRegressionTree::Print

typedef void ( ::gezi::OnlineRegressionTree::*Print_function_type )( ::gezi::Vector const &,int,int,::std::string ) ;

OnlineRegressionTree_exposer.def(
"Print"
, Print_function_type( &::gezi::OnlineRegressionTree::Print )
, ( bp::arg("features"), bp::arg("node")=(int)(0), bp::arg("depth")=(int)(0), bp::arg("suffix")="$" ) );

}
{ //::gezi::OnlineRegressionTree::SetFeatureNames

typedef void ( ::gezi::OnlineRegressionTree::*SetFeatureNames_function_type )( ::gezi::FeatureNamesVector const & ) ;

OnlineRegressionTree_exposer.def(
"SetFeatureNames"
, SetFeatureNames_function_type( &::gezi::OnlineRegressionTree::SetFeatureNames )
, ( bp::arg("featureNames") ) );

}
{ //::gezi::OnlineRegressionTree::operator=

typedef ::gezi::OnlineRegressionTree & ( ::gezi::OnlineRegressionTree::*assign_function_type )( ::gezi::OnlineRegressionTree const & ) ;

OnlineRegressionTree_exposer.def(
"assign"
, assign_function_type( &::gezi::OnlineRegressionTree::operator= )
, ( bp::arg("arg0") )
, bp::return_self< >() );

}
OnlineRegressionTree_exposer.def( bp::self == bp::self );
OnlineRegressionTree_exposer.def_readwrite( "NumLeaves", &gezi::OnlineRegressionTree::NumLeaves );
OnlineRegressionTree_exposer.add_property( "_featureNames"
, bp::make_function( (::gezi::FeatureNamesVector * (*)( ::gezi::OnlineRegressionTree const & ))(&OnlineRegressionTree_wrapper::get__featureNames), bp::return_internal_reference< >() )
, bp::make_function( (void (*)( ::gezi::OnlineRegressionTree &,::gezi::FeatureNamesVector * ))(&OnlineRegressionTree_wrapper::set__featureNames), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
OnlineRegressionTree_exposer.def_readwrite( "_gainPValue", &gezi::OnlineRegressionTree::_gainPValue );
OnlineRegressionTree_exposer.def_readwrite( "_gtChild", &gezi::OnlineRegressionTree::_gtChild );
OnlineRegressionTree_exposer.def_readwrite( "_leafValue", &gezi::OnlineRegressionTree::_leafValue );
OnlineRegressionTree_exposer.def_readwrite( "_lteChild", &gezi::OnlineRegressionTree::_lteChild );
OnlineRegressionTree_exposer.def_readwrite( "_maxOutput", &gezi::OnlineRegressionTree::_maxOutput );
OnlineRegressionTree_exposer.def_readwrite( "_previousLeafValue", &gezi::OnlineRegressionTree::_previousLeafValue );
OnlineRegressionTree_exposer.def_readwrite( "_splitFeature", &gezi::OnlineRegressionTree::_splitFeature );
OnlineRegressionTree_exposer.def_readwrite( "_splitGain", &gezi::OnlineRegressionTree::_splitGain );
OnlineRegressionTree_exposer.def_readwrite( "_threshold", &gezi::OnlineRegressionTree::_threshold );
OnlineRegressionTree_exposer.def_readwrite( "_weight", &gezi::OnlineRegressionTree::_weight );
}

{ //::gezi::Vector
typedef bp::class_< gezi::Vector > Vector_exposer_t;
Vector_exposer_t Vector_exposer = Vector_exposer_t( "Vector", bp::init< >() );
bp::scope Vector_scope( Vector_exposer );
VEC_METHOD2(Vector_exposer, gezi::Vector);
Vector_exposer.def( bp::init< gezi::Vector const & >(( bp::arg("arg0") )) );
Vector_exposer.def( bp::init< int >(( bp::arg("length_") )) );
bp::implicitly_convertible< int, gezi::Vector >();
Vector_exposer.def( bp::init< Float, int >(( bp::arg("value_"), bp::arg("length_") )) );
Vector_exposer.def( bp::init< int, Float >(( bp::arg("length_"), bp::arg("value_") )) );
Vector_exposer.def( bp::init< std::map< int, double > const & >(( bp::arg("m") )) );
bp::implicitly_convertible< std::map< int, double > const &, gezi::Vector >();
Vector_exposer.def( bp::init< int, ivec &, std::vector< double > & >(( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") )) );
Vector_exposer.def( bp::init< ivec &, std::vector< double > &, bp::optional< int > >(( bp::arg("indices_"), bp::arg("values_"), bp::arg("length_")=(int)(1024000) )) );
Vector_exposer.def( bp::init< std::vector< double > & >(( bp::arg("values_") )) );
bp::implicitly_convertible< std::vector< double > &, gezi::Vector >();
Vector_exposer.def( bp::init< std::string, bp::optional< int, int, std::string > >(( bp::arg("input"), bp::arg("startIndex")=(int)(0), bp::arg("length_")=(int)(1024000), bp::arg("sep")=",\011 " )) );
Vector_exposer.def( bp::init< __gnu_cxx::__normal_iterator< double*, std::vector< double > >, __gnu_cxx::__normal_iterator< double*, std::vector< double > > >(( bp::arg("first"), bp::arg("end") )) );
{ //::gezi::Vector::Add

typedef void ( ::gezi::Vector::*Add_function_type )( ::Float ) ;

Vector_exposer.def(
"Add"
, Add_function_type( &::gezi::Vector::Add )
, ( bp::arg("value") ) );

}
{ //::gezi::Vector::Add

typedef void ( ::gezi::Vector::*Add_function_type )( int,::Float ) ;

Vector_exposer.def(
"Add"
, Add_function_type( &::gezi::Vector::Add )
, ( bp::arg("index"), bp::arg("value") ) );

}
{ //::gezi::Vector::Add

typedef void ( ::gezi::Vector::*Add_function_type )( ::gezi::Vector const & ) ;

Vector_exposer.def(
"Add"
, Add_function_type( &::gezi::Vector::Add )
, ( bp::arg("other") ) );

}
{ //::gezi::Vector::AddMap

typedef void ( ::gezi::Vector::*AddMap_function_type )( ::std::map< int, double > const & ) ;

Vector_exposer.def(
"AddMap"
, AddMap_function_type( &::gezi::Vector::AddMap )
, ( bp::arg("m") ) );

}
{ //::gezi::Vector::AllStr

typedef ::std::string ( ::gezi::Vector::*AllStr_function_type )( ::std::string ) const;

Vector_exposer.def(
"AllStr"
, AllStr_function_type( &::gezi::Vector::AllStr )
, ( bp::arg("sep")="," ) );

}
{ //::gezi::Vector::CheckInvariants

typedef void ( ::gezi::Vector::*CheckInvariants_function_type )(  ) ;

Vector_exposer.def(
"CheckInvariants"
, CheckInvariants_function_type( &::gezi::Vector::CheckInvariants ) );

}
{ //::gezi::Vector::Clear

typedef void ( ::gezi::Vector::*Clear_function_type )(  ) ;

Vector_exposer.def(
"Clear"
, Clear_function_type( &::gezi::Vector::Clear ) );

}
{ //::gezi::Vector::Count

typedef int ( ::gezi::Vector::*Count_function_type )(  ) const;

Vector_exposer.def(
"Count"
, Count_function_type( &::gezi::Vector::Count ) );

}
{ //::gezi::Vector::DenseStr

typedef ::std::string ( ::gezi::Vector::*DenseStr_function_type )( ::std::string ) const;

Vector_exposer.def(
"DenseStr"
, DenseStr_function_type( &::gezi::Vector::DenseStr )
, ( bp::arg("sep")="," ) );

}
{ //::gezi::Vector::Densify

typedef void ( ::gezi::Vector::*Densify_function_type )( ::Float ) ;

Vector_exposer.def(
"Densify"
, Densify_function_type( &::gezi::Vector::Densify )
, ( bp::arg("maxSparsity") ) );

}
{ //::gezi::Vector::Densify

typedef void ( ::gezi::Vector::*Densify_function_type )(  ) ;

Vector_exposer.def(
"Densify"
, Densify_function_type( &::gezi::Vector::Densify ) );

}
{ //::gezi::Vector::Empty

typedef bool ( ::gezi::Vector::*Empty_function_type )(  ) const;

Vector_exposer.def(
"Empty"
, Empty_function_type( &::gezi::Vector::Empty ) );

}
{ //::gezi::Vector::ForceDense

typedef void ( ::gezi::Vector::*ForceDense_function_type )(  ) ;

Vector_exposer.def(
"ForceDense"
, ForceDense_function_type( &::gezi::Vector::ForceDense ) );

}
{ //::gezi::Vector::ForceSparse

typedef void ( ::gezi::Vector::*ForceSparse_function_type )(  ) ;

Vector_exposer.def(
"ForceSparse"
, ForceSparse_function_type( &::gezi::Vector::ForceSparse ) );

}
{ //::gezi::Vector::Index

typedef int ( ::gezi::Vector::*Index_function_type )( int ) const;

Vector_exposer.def(
"Index"
, Index_function_type( &::gezi::Vector::Index )
, ( bp::arg("index") ) );

}
{ //::gezi::Vector::Indices

typedef ::ivec const & ( ::gezi::Vector::*Indices_function_type )(  ) const;

Vector_exposer.def(
"Indices"
, Indices_function_type( &::gezi::Vector::Indices )
, bp::return_value_policy< bp::copy_const_reference >() );

}
{ //::gezi::Vector::Indices

typedef ::ivec & ( ::gezi::Vector::*Indices_function_type )(  ) ;

Vector_exposer.def(
"Indices"
, Indices_function_type( &::gezi::Vector::Indices )
, bp::return_internal_reference<>());

}
{ //::gezi::Vector::Init

typedef void ( ::gezi::Vector::*Init_function_type )( ::std::string,int,int,::std::string ) ;

Vector_exposer.def(
"Init"
, Init_function_type( &::gezi::Vector::Init )
, ( bp::arg("input"), bp::arg("startIndex")=(int)(0), bp::arg("length_")=(int)(0), bp::arg("sep")=",\011 " ) );

}
{ //::gezi::Vector::Init

typedef void ( ::gezi::Vector::*Init_function_type )( int,::std::vector< int > &,::std::vector< double > & ) ;

Vector_exposer.def(
"Init"
, Init_function_type( &::gezi::Vector::Init )
, ( bp::arg("length_"), bp::arg("indices_"), bp::arg("values_") ) );

}
{ //::gezi::Vector::Init

typedef void ( ::gezi::Vector::*Init_function_type )( ::std::vector< double > & ) ;

Vector_exposer.def(
"Init"
, Init_function_type( &::gezi::Vector::Init )
, ( bp::arg("values_") ) );

}
{ //::gezi::Vector::IsDense

typedef bool ( ::gezi::Vector::*IsDense_function_type )(  ) const;

Vector_exposer.def(
"IsDense"
, IsDense_function_type( &::gezi::Vector::IsDense ) );

}
{ //::gezi::Vector::IsSparse

typedef bool ( ::gezi::Vector::*IsSparse_function_type )(  ) const;

Vector_exposer.def(
"IsSparse"
, IsSparse_function_type( &::gezi::Vector::IsSparse ) );

}
{ //::gezi::Vector::Length

typedef int ( ::gezi::Vector::*Length_function_type )(  ) const;

Vector_exposer.def(
"Length"
, Length_function_type( &::gezi::Vector::Length ) );

}
{ //::gezi::Vector::MakeDense

typedef void ( ::gezi::Vector::*MakeDense_function_type )(  ) ;

Vector_exposer.def(
"MakeDense"
, MakeDense_function_type( &::gezi::Vector::MakeDense ) );

}
{ //::gezi::Vector::MakeSparse

typedef void ( ::gezi::Vector::*MakeSparse_function_type )(  ) ;

Vector_exposer.def(
"MakeSparse"
, MakeSparse_function_type( &::gezi::Vector::MakeSparse ) );

}
{ //::gezi::Vector::Norm

typedef ::Float ( ::gezi::Vector::*Norm_function_type )(  ) const;

Vector_exposer.def(
"Norm"
, Norm_function_type( &::gezi::Vector::Norm ) );

}
{ //::gezi::Vector::NumNonZeros

typedef int ( ::gezi::Vector::*NumNonZeros_function_type )(  ) ;

Vector_exposer.def(
"NumNonZeros"
, NumNonZeros_function_type( &::gezi::Vector::NumNonZeros ) );

}
{ //::gezi::Vector::PrepareDense

typedef void ( ::gezi::Vector::*PrepareDense_function_type )(  ) ;

Vector_exposer.def(
"PrepareDense"
, PrepareDense_function_type( &::gezi::Vector::PrepareDense ) );

}
{ //::gezi::Vector::Resize

typedef void ( ::gezi::Vector::*Resize_function_type )( int,::Float ) ;

Vector_exposer.def(
"Resize"
, Resize_function_type( &::gezi::Vector::Resize )
, ( bp::arg("length_"), bp::arg("value_")=0 ) );

}
{ //::gezi::Vector::ScaleBy

typedef void ( ::gezi::Vector::*ScaleBy_function_type )( ::Float ) ;

Vector_exposer.def(
"ScaleBy"
, ScaleBy_function_type( &::gezi::Vector::ScaleBy )
, ( bp::arg("d") ) );

}
{ //::gezi::Vector::SetIndex

typedef void ( ::gezi::Vector::*SetIndex_function_type )( int,int ) ;

Vector_exposer.def(
"SetIndex"
, SetIndex_function_type( &::gezi::Vector::SetIndex )
, ( bp::arg("index"), bp::arg("indexValue") ) );

}
{ //::gezi::Vector::SetLength

typedef void ( ::gezi::Vector::*SetLength_function_type )( int ) ;

Vector_exposer.def(
"SetLength"
, SetLength_function_type( &::gezi::Vector::SetLength )
, ( bp::arg("length_") ) );

}
{ //::gezi::Vector::SetValue

typedef void ( ::gezi::Vector::*SetValue_function_type )( int,::Float ) ;

Vector_exposer.def(
"SetValue"
, SetValue_function_type( &::gezi::Vector::SetValue )
, ( bp::arg("index"), bp::arg("value") ) );

}
{ //::gezi::Vector::Sparsify

typedef void ( ::gezi::Vector::*Sparsify_function_type )( ::Float ) ;

Vector_exposer.def(
"Sparsify"
, Sparsify_function_type( &::gezi::Vector::Sparsify )
, ( bp::arg("maxSparsity") ) );

}
{ //::gezi::Vector::Sparsify

typedef void ( ::gezi::Vector::*Sparsify_function_type )(  ) ;

Vector_exposer.def(
"Sparsify"
, Sparsify_function_type( &::gezi::Vector::Sparsify ) );

}
{ //::gezi::Vector::SquaredNorm

typedef ::Float ( ::gezi::Vector::*SquaredNorm_function_type )(  ) const;

Vector_exposer.def(
"SquaredNorm"
, SquaredNorm_function_type( &::gezi::Vector::SquaredNorm ) );

}
{ //::gezi::Vector::Str

typedef ::std::string ( ::gezi::Vector::*Str_function_type )( ::std::string ) const;

Vector_exposer.def(
"Str"
, Str_function_type( &::gezi::Vector::Str )
, ( bp::arg("sep")="," ) );

}
{ //::gezi::Vector::Subtract

typedef void ( ::gezi::Vector::*Subtract_function_type )( ::gezi::Vector const & ) ;

Vector_exposer.def(
"Subtract"
, Subtract_function_type( &::gezi::Vector::Subtract )
, ( bp::arg("other") ) );

}
{ //::gezi::Vector::Swap

typedef void ( ::gezi::Vector::*Swap_function_type )( ::gezi::Vector & ) ;

Vector_exposer.def(
"Swap"
, Swap_function_type( &::gezi::Vector::Swap )
, ( bp::arg("other") ) );

}
{ //::gezi::Vector::ToDense

typedef void ( ::gezi::Vector::*ToDense_function_type )( ::std::vector< double > & ) ;

Vector_exposer.def(
"ToDense"
, ToDense_function_type( &::gezi::Vector::ToDense )
, ( bp::arg("values_") ) );

}
{ //::gezi::Vector::ToDense

typedef void ( ::gezi::Vector::*ToDense_function_type )(  ) ;

Vector_exposer.def(
"ToDense"
, ToDense_function_type( &::gezi::Vector::ToDense ) );

}
{ //::gezi::Vector::ToSparse

typedef void ( ::gezi::Vector::*ToSparse_function_type )(  ) ;

Vector_exposer.def(
"ToSparse"
, ToSparse_function_type( &::gezi::Vector::ToSparse ) );

}
{ //::gezi::Vector::Value

typedef ::Float ( ::gezi::Vector::*Value_function_type )( int ) const;

Vector_exposer.def(
"Value"
, Value_function_type( &::gezi::Vector::Value )
, ( bp::arg("index") ) );

}
{ //::gezi::Vector::Values

typedef ::std::vector< double > const & ( ::gezi::Vector::*Values_function_type )(  ) const;

Vector_exposer.def(
"Values"
, Values_function_type( &::gezi::Vector::Values )
, bp::return_value_policy< bp::copy_const_reference >() );

}
{ //::gezi::Vector::Values

typedef ::std::vector< double > & ( ::gezi::Vector::*Values_function_type )(  ) ;

Vector_exposer.def(
"Values"
, Values_function_type( &::gezi::Vector::Values )
, bp::return_internal_reference<>());

}
{ //::gezi::Vector::back

typedef ::Float ( ::gezi::Vector::*back_function_type )(  ) ;

Vector_exposer.def(
"back"
, back_function_type( &::gezi::Vector::back ) );

}
{ //::gezi::Vector::clear

typedef void ( ::gezi::Vector::*clear_function_type )(  ) ;

Vector_exposer.def(
"clear"
, clear_function_type( &::gezi::Vector::clear ) );

}
{ //::gezi::Vector::dot

typedef ::Float ( ::gezi::Vector::*dot_function_type )( ::gezi::Vector const & ) const;

Vector_exposer.def(
"dot"
, dot_function_type( &::gezi::Vector::dot )
, ( bp::arg("other") ) );

}
{ //::gezi::Vector::empty

typedef bool ( ::gezi::Vector::*empty_function_type )(  ) const;

Vector_exposer.def(
"empty"
, empty_function_type( &::gezi::Vector::empty ) );

}
{ //::gezi::Vector::erase

typedef void ( ::gezi::Vector::*erase_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ) ;

Vector_exposer.def(
"erase"
, erase_function_type( &::gezi::Vector::erase )
, ( bp::arg("pos") ) );

}
{ //::gezi::Vector::erase

typedef void ( ::gezi::Vector::*erase_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > >,::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ) ;

Vector_exposer.def(
"erase"
, erase_function_type( &::gezi::Vector::erase )
, ( bp::arg("first"), bp::arg("last") ) );

}
{ //::gezi::Vector::front

typedef ::Float ( ::gezi::Vector::*front_function_type )(  ) ;

Vector_exposer.def(
"front"
, front_function_type( &::gezi::Vector::front ) );

}
{ //::gezi::Vector::insert

typedef ::__gnu_cxx::__normal_iterator< double*, std::vector< double > > ( ::gezi::Vector::*insert_function_type )( ::__gnu_cxx::__normal_iterator< double*, std::vector< double > >,::Float const & ) ;

Vector_exposer.def(
"insert"
, insert_function_type( &::gezi::Vector::insert )
, ( bp::arg("position"), bp::arg("val") ) );

}
{ //::gezi::Vector::operator()

typedef ::gezi::Vector & ( ::gezi::Vector::*__call___function_type )( int,::Float ) ;

Vector_exposer.def(
"__call__"
, __call___function_type( &::gezi::Vector::operator() )
, ( bp::arg("index"), bp::arg("value") )
, bp::return_internal_reference<>());

}
Vector_exposer.def( bp::self *= bp::other< Float >() );
Vector_exposer.def( bp::self += bp::self );
Vector_exposer.def( bp::self -= bp::self );
Vector_exposer.def( bp::self /= bp::other< Float >() );
{ //::gezi::Vector::operator=

typedef ::gezi::Vector & ( ::gezi::Vector::*assign_function_type )( ::gezi::Vector const & ) ;

Vector_exposer.def(
"assign"
, assign_function_type( &::gezi::Vector::operator= )
, ( bp::arg("arg0") )
, bp::return_self< >() );

}
{ //::gezi::Vector::operator[]

typedef ::Float ( ::gezi::Vector::*__getitem___function_type )( int ) const;

Vector_exposer.def(
"__getitem__"
, __getitem___function_type( &::gezi::Vector::operator[] )
, ( bp::arg("index") ) );

}
{ //::gezi::Vector::push_back

typedef void ( ::gezi::Vector::*push_back_function_type )( ::Float ) ;

Vector_exposer.def(
"push_back"
, push_back_function_type( &::gezi::Vector::push_back )
, ( bp::arg("item") ) );

}
{ //::gezi::Vector::resize

typedef void ( ::gezi::Vector::*resize_function_type )( int,::Float ) ;

Vector_exposer.def(
"resize"
, resize_function_type( &::gezi::Vector::resize )
, ( bp::arg("length_"), bp::arg("value_")=0 ) );

}
{ //::gezi::Vector::size

typedef ::size_t ( ::gezi::Vector::*size_function_type )(  ) const;

Vector_exposer.def(
"size"
, size_function_type( &::gezi::Vector::size ) );

}
{ //::gezi::Vector::str

typedef ::std::string ( ::gezi::Vector::*str_function_type )( ::std::string ) const;

Vector_exposer.def(
"str"
, str_function_type( &::gezi::Vector::str )
, ( bp::arg("sep")="," ) );

}
Vector_exposer.def_readwrite( "indices", &gezi::Vector::indices );
Vector_exposer.def_readwrite( "keepDense", &gezi::Vector::keepDense );
Vector_exposer.def_readwrite( "keepSparse", &gezi::Vector::keepSparse );
Vector_exposer.def_readwrite( "normalized", &gezi::Vector::normalized );
Vector_exposer.def_readwrite( "numNonZeros", &gezi::Vector::numNonZeros );
Vector_exposer.def_readwrite( "sparsityRatio", &gezi::Vector::sparsityRatio );
Vector_exposer.def_readwrite( "values", &gezi::Vector::values );
}

{ //::gezi::get_feature_name

typedef ::std::string ( *get_feature_name_function_type )( ::svec const * const,int );

bp::def(
"get_feature_name"
, get_feature_name_function_type( &::gezi::get_feature_name )
, ( bp::arg("featureNames"), bp::arg("index") ) );

}

{ //::gezi::get_feature_name

typedef ::std::string ( *get_feature_name_function_type )( ::svec const &,int );

bp::def(
"get_feature_name"
, get_feature_name_function_type( &::gezi::get_feature_name )
, ( bp::arg("featureNames"), bp::arg("index") ) );

}
}
